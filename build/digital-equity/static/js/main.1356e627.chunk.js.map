{"version":3,"sources":["Constants.js","components/Filters/SchoolDistrictFilter.js","components/Filters/PrimaryGraphsChoose.js","components/FilterPanel/FilterPanel.js","components/ChartPanel/GenderChart.js","components/ChartPanel/EthnicityChart.js","components/ChartPanel/EconDisChart.js","components/ChartPanel/DisabilityChart.js","components/ChartPanel/ELLChart.js","components/NextStepsPanel.js","School.js","App.js","serviceWorker.js","index.js"],"names":["EntityType","SCHOOL","DISTRICT","EthnicityAcronymList","id","desc","chartColor","EthnicityDefaultMap","AA","value","AS","HI","MR","NA","NH_PI","WH","Menu","props","optionSelectedLength","getValue","length","children","style","margin","SchoolDistrictFilter","filteredSchools","data","schoolSet","schoolData","schools","Set","schoolName","schoolRow","_type","add","_name","getSchools","districtSet","getDistricts","schoolOptions","optionList","concat","label","createSchoolOptions","districtOptions","districtName","createDistrictOptions","allOptions","display","flexDirection","padding","color","components","isValidNewOption","inputValue","selectValue","options","defaultValue","filter","option","isMulti","required","onChange","selectedOptions","actionMeta","onOptionsChange","styles","checkbox","marginTop","PrimaryGraphChoose","textAlign","type","optionChooseClicKHandler","checked","selectedFilters","gender","ethnicity","economicallyDisadvantaged","disability","englishLanguageLearner","targetId","target","newTargetVal","newState","onSelectionChange","FilterPanel","className","onSchoolFilterChange","PrimaryGraphsChoose","newSelection","onGraphSelectionChange","root","fontFamily","position","width","height","overlay","top","right","bottom","left","alignItems","justifyContent","fontSize","pointerEvents","totalLabel","GenderChart","pieCharts","schoolDataArray","dataLength","forEach","row","index","dataArray","schoolYear","console","log","push","key","flexGrow","colors","d","isInteractive","sortByValue","enableSlicesLabels","enableRadialLabels","innerRadius","tooltip","percentage","getTooltipHTML","legends","anchor","direction","itemWidth","itemHeight","translateY","translateX","undefined","heading","getPieCharts","allData","chartData","_schoolYear","maleCount","_male","femaleCount","_female","thisSchoolData","toFixed","getGenderForSchool","EthnicityChart","createPieCharts","ethnicityAcronymList","_ethnicity","totalStudents","element","getGroupedEthnicData","EconDisChart","schoolObject","disadvantagedCount","_economicallyDisadvantaged","totalCount","_enrolled","nonDisadvantagedCount","getEconDisForSchool","DisabilityChart","disabilityCount","_studentsWithDisability","nonDisabilityCount","getDisabilityData","ELLChart","languageLearnerCount","_englishLanguageLearner","otherCount","getLanguageLearnerData","NextStepsPanel","action","borderStyle","borderWidth","header","learn","footer","backgroundColor","minHeight","marginRight","School","this","_ethnicityMap","_districtName","_testTakers","entityType","ethnicityObj","ethnicityMap","name","count","year","App","graphSelectionChangeHandler","bind","state","transformSchoolData","newSchoolData","extractSchoolData","charts","createChartsFromFilterState","opts","schoolFilterChangeHandler","setState","transformSelectedOptions","schoolDataMap","schoolNameArray","filteredArray","schoolObjectMap","filterSchoolDataWithFields","getSchoolObjectMap","Object","keys","districtObject","setName","setType","setEthnicityMap","setMale","setFemale","setEconomicallyDisadvantaged","setEnrolled","setStudentsWithDisability","thisDistrictEthnicityArray","thisDistrictEthnicityMap","setEthnicity","setEnglishLanguageLearner","schoolsWithMissingEntry","Number","isInteger","parseInt","thisSchool","setDistrictName","setSchoolYear","thisSchoolEthnicityArray","thisSchoolEthnicityMap","ethnicityArrayMember","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1356e627.chunk.js","sourcesContent":["export const EntityType = {\n    SCHOOL: 0,\n    DISTRICT: 1\n};\n\nexport const EthnicityAcronymList = [\n    {\n        id: \"AA\",\n        desc: \"African American\",\n        chartColor: \"#f6d18a\"\n    },\n    {\n        id: \"AS\",\n        desc: \"Asian\",\n        chartColor: \"blue\"\n    },\n    {\n        id: \"HI\",\n        desc: \"Hispanic\",\n        chartColor: \"green\"\n    },\n    {\n        id: \"MR\",\n        desc: \"Multiracial\",\n        chartColor: \"yellow\"\n    },\n    {\n        id: \"NA\",\n        desc: \"NA\",\n        chartColor: \"pink\"\n    },\n    {\n        id: \"NH_PI\",\n        desc: \"Native Hawaiian and Pacific Islander\",\n        chartColor: \"red\"\n    },\n    {\n        id: \"WH\",\n        desc: \"White\",\n        chartColor: \"brown\"\n    }\n];\n\nexport const EthnicityDefaultMap = {\n    AA: {\n        id: \"AA\",\n        desc: \"African American\",\n        chartColor: \"#f6d18a\",\n        value: 0\n    },\n    AS: {\n        id: \"AS\",\n        desc: \"Asian\",\n        chartColor: \"blue\",\n        value: 0\n    },\n    HI: {\n        id: \"HI\",\n        desc: \"Hispanic\",\n        chartColor: \"green\",\n        value: 0\n    },\n    MR: {\n        id: \"MR\",\n        desc: \"Multiracial\",\n        chartColor: \"yellow\",\n        value: 0\n    },\n    NA: {\n        id: \"NA\",\n        desc: \"NA\",\n        chartColor: \"pink\",\n        value: 0\n    },\n    NH_PI: {\n        id: \"NH_PI\",\n        desc: \"Native Hawaiian and Pacific Islander\",\n        chartColor: \"red\",\n        value: 0\n    },\n    WH: {\n        id: \"WH\",\n        desc: \"White\",\n        chartColor: \"brown\",\n        value: 0\n    }\n};\n","import React from \"react\";\nimport Select from \"react-select\";\n\nimport Creatable from \"react-select/creatable\";\nimport { components } from \"react-select\";\n\nimport { EntityType } from \"../../Constants\";\n\nfunction SchoolDistrictFilter(props) {\n    const filteredSchools = filterSchooldata(props.data);\n\n    const schoolSet = getSchools(filteredSchools);\n    const districtSet = getDistricts(filteredSchools);\n    const schoolOptions = createSchoolOptions(schoolSet);\n    const districtOptions = createDistrictOptions(districtSet);\n    const allOptions = schoolOptions.concat(districtOptions);\n\n    const isValidNewOption = (inputValue, selectValue) =>\n        inputValue.length > 0 && selectValue.length < 5;\n\n    return (\n        <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n            <div style={{ padding: \"10px\" }}>\n                Select School / District to compare\n            </div>\n            <div style={{ color: \"black\" }}>\n                {/* <Select\n                    options={allOptions}\n                    defaultValue={allOptions.filter(\n                        option => option.label === \"Massachussets\"\n                    )}\n                    isMulti\n                    onChange={selectedOptions =>\n                        props.onOptionsChange(selectedOptions)\n                    }\n                /> */}\n\n                <Creatable\n                    components={{ Menu }}\n                    isValidNewOption={isValidNewOption}\n                    options={allOptions}\n                    defaultValue={allOptions.filter(\n                        option => option.label === \"Massachussets\"\n                    )}\n                    isMulti\n                    required\n                    onChange={(selectedOptions, actionMeta) =>\n                        props.onOptionsChange(selectedOptions, actionMeta)\n                    }\n                />\n            </div>\n        </div>\n    );\n}\n\nconst Menu = props => {\n    const optionSelectedLength = props.getValue().length || 0;\n    return (\n        <components.Menu {...props}>\n            {optionSelectedLength < 3 ? (\n                props.children\n            ) : (\n                <div style={{ margin: 15 }}>\n                    Cannot view more than 3 schools/districts\n                </div>\n            )}\n        </components.Menu>\n    );\n};\n\n// function App() {\n//     const isValidNewOption = (inputValue, selectValue) =>\n//         inputValue.length > 0 && selectValue.length < 5;\n//     return (\n//         <div className=\"App\">\n//             <Creatable\n//                 components={{ Menu }}\n//                 isMulti\n//                 isValidNewOption={isValidNewOption}\n//                 options={options}\n//             />\n//         </div>\n//     );\n// }\n\nfunction filterSchooldata(schoolData) {\n    return schoolData;\n}\n\nfunction getSchools(schoolData) {\n    let schools = new Set();\n    for (let schoolName in schoolData) {\n        const schoolRow = schoolData[schoolName];\n        if (schoolRow._type === EntityType.SCHOOL) {\n            schools.add(schoolRow._name);\n        }\n    }\n\n    return schools;\n}\n\nfunction createSchoolOptions(schoolSet) {\n    let optionList = [];\n    for (let schoolName of schoolSet) {\n        optionList = optionList.concat({\n            value: schoolName,\n            label: schoolName\n        });\n    }\n    return optionList;\n}\n\nfunction getDistricts(schoolData) {\n    let districtSet = new Set();\n    for (let schoolName in schoolData) {\n        const schoolRow = schoolData[schoolName];\n        if (schoolRow._type === EntityType.DISTRICT) {\n            districtSet.add(schoolRow._name);\n        }\n    }\n\n    return districtSet;\n}\n\nfunction createDistrictOptions(districtSet) {\n    let optionList = [];\n    for (let districtName of districtSet) {\n        optionList = optionList.concat({\n            value: districtName,\n            label: districtName\n        });\n    }\n    return optionList;\n}\n\nexport default SchoolDistrictFilter;\n","import React from \"react\";\n\nconst styles = {\n    checkbox: {\n        marginTop: \"5px\"\n    }\n};\n\nfunction PrimaryGraphChoose(props) {\n    // console.log(props);\n\n    return (\n        <div\n            style={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                textAlign: \"left\"\n            }}\n        >\n            <div style={{ padding: \"10px\" }}>Select To View:</div>\n            <div>\n                <div style={styles.checkbox}>\n                    <input\n                        type=\"checkbox\"\n                        id=\"gender\"\n                        onChange={option =>\n                            optionChooseClicKHandler(props, option)\n                        }\n                        checked={props.selectedFilters.gender}\n                    />\n                    <label>Gender</label>\n                </div>\n                <div style={styles.checkbox}>\n                    <input\n                        type=\"checkbox\"\n                        id=\"ethnicity\"\n                        onChange={option =>\n                            optionChooseClicKHandler(props, option)\n                        }\n                        checked={props.selectedFilters.ethnicity}\n                    />\n                    <label>Ethnicity</label>\n                </div>\n\n                <div style={styles.checkbox}>\n                    <input\n                        type=\"checkbox\"\n                        id=\"economicallyDisadvantaged\"\n                        onChange={option =>\n                            optionChooseClicKHandler(props, option)\n                        }\n                        checked={\n                            props.selectedFilters.economicallyDisadvantaged\n                        }\n                    />\n                    <label>Economically Disadvantaged</label>\n                </div>\n\n                <div style={styles.checkbox}>\n                    <input\n                        type=\"checkbox\"\n                        id=\"disability\"\n                        onChange={option =>\n                            optionChooseClicKHandler(props, option)\n                        }\n                        checked={props.selectedFilters.disability}\n                    />\n                    <label>Students With Disability</label>\n                </div>\n\n                <div style={styles.checkbox}>\n                    <input\n                        type=\"checkbox\"\n                        id=\"englishLanguageLearner\"\n                        onChange={option =>\n                            optionChooseClicKHandler(props, option)\n                        }\n                        checked={props.selectedFilters.englishLanguageLearner}\n                    />\n                    <label>English Language Learners</label>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default PrimaryGraphChoose;\n\nfunction optionChooseClicKHandler(props, option) {\n    const targetId = option.target.id;\n    const newTargetVal = option.target.checked;\n    const oldState = props.selectedFilters;\n\n    let newState = oldState;\n    newState[targetId] = newTargetVal;\n    props.onSelectionChange(newState);\n}\n","import React from \"react\";\nimport SchoolDistrictFilter from \"../Filters/SchoolDistrictFilter\";\nimport PrimaryGraphsChoose from \"../Filters/PrimaryGraphsChoose\";\n\n// defaultSchoolOptions =\n\nfunction FilterPanel(props) {\n    // console.log('panel recieved school data' + props.data);\n\n    return (\n        <div>\n            <h3 style={{ margin: \"10px 0 10px 0\" }}>\n                Select filters below to view a graph\n            </h3>\n            <div\n                className=\"filter-container\"\n                style={{ display: \"flex\", flexDirection: \"column\" }}\n            >\n                <div>\n                    <SchoolDistrictFilter\n                        data={props.data}\n                        onOptionsChange={(selectedOptions, actionMeta) =>\n                            props.onSchoolFilterChange(\n                                selectedOptions,\n                                actionMeta\n                            )\n                        }\n                    ></SchoolDistrictFilter>\n                </div>\n                <div>\n                    <PrimaryGraphsChoose\n                        selectedFilters={props.selectedFilters}\n                        onSelectionChange={newSelection =>\n                            props.onGraphSelectionChange(newSelection)\n                        }\n                    />\n                </div>\n                <div></div>\n            </div>\n        </div>\n    );\n}\n\nexport default FilterPanel;\n","import React from \"react\";\nimport { ResponsivePie } from \"@nivo/pie\";\n// import School from \"../../School\";\n\n/**\n * Main class component\n * @param {*} props\n */\nfunction GenderChart(props) {\n    const schoolDataArray = getGenderForSchool(props.schoolData, props.options);\n\n    let pieCharts = getPieCharts(schoolDataArray);\n\n    return (\n        <div\n            style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                height: \"50%\",\n                width: \"100%\"\n            }}\n        >\n            {pieCharts}\n        </div>\n    );\n}\n\n/**\n * return array: x->schoolName, male, female\n */\nfunction getGenderForSchool(allData, options) {\n    let chartData = [];\n    options.forEach(schoolName => {\n        const schoolRow = allData[schoolName];\n\n        const schoolYear = schoolRow._schoolYear;\n        const maleCount = schoolRow._male;\n        const femaleCount = schoolRow._female;\n        const malePercentage = (\n            (maleCount / (maleCount + femaleCount)) *\n            100\n        ).toFixed(2);\n        const femalePercentage = (\n            (femaleCount / (maleCount + femaleCount)) *\n            100\n        ).toFixed(2);\n\n        let thisSchoolData = {};\n        let schoolDataArray = [\n            {\n                id: \"male\",\n                value: maleCount,\n                percentage: malePercentage,\n                color: \"orange\",\n                label: \"Male\"\n            },\n            {\n                id: \"female\",\n                value: femaleCount,\n                percentage: femalePercentage,\n                color: \"blue\",\n                label: \"Female\"\n            }\n        ];\n        thisSchoolData.schoolName = schoolName;\n        thisSchoolData.dataArray = schoolDataArray;\n        thisSchoolData.schoolYear = schoolYear;\n        chartData.push(thisSchoolData);\n    });\n\n    return chartData;\n}\n\nconst pieChartParentDivStyle = {\n    height: \"300px\",\n    width: \"25%\",\n    minWidth: \"250px\",\n    flexGrow: \"1\",\n    display: \"flex\",\n    flexDirection: \"column\"\n};\n\nconst margin = { top: 30, right: 200, bottom: 30, left: 30 };\n\nconst styles = {\n    root: {\n        fontFamily: \"consolas, sans-serif\",\n        textAlign: \"center\",\n        position: \"relative\",\n        width: 250,\n        height: 300\n    },\n    overlay: {\n        position: \"absolute\",\n        top: 0,\n        right: margin.right,\n        bottom: 0,\n        left: margin.left,\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        fontSize: 30,\n        color: \"#FFFFFF\",\n        // background: \"#FFFFFF33\",\n        textAlign: \"center\",\n        // This is important to preserve the chart interactivity\n        pointerEvents: \"none\"\n    },\n    totalLabel: {\n        fontSize: 24\n    }\n};\n\nfunction getPieCharts(schoolDataArray) {\n    const dataLength = schoolDataArray.length;\n    let pieCharts = [];\n\n    schoolDataArray.forEach((row, index) => {\n        const schoolName = row.schoolName;\n        const schoolData = row.dataArray;\n        const schoolYear = row.schoolYear;\n        console.log(\"school year: \" + schoolYear);\n\n        pieCharts.push(\n            <div key={schoolName} style={styles.root}>\n                <div style={{ height: \"90%\", flexGrow: \"1\" }}>\n                    <ResponsivePie\n                        key={schoolName}\n                        colors={d => d.color}\n                        isInteractive={true}\n                        data={schoolData}\n                        sortByValue={true}\n                        enableSlicesLabels={false}\n                        enableRadialLabels={false}\n                        margin={{ top: 40, right: 60, bottom: 40, left: 40 }}\n                        innerRadius={0.5}\n                        tooltip={data => {\n                            return getTooltipHTML(data);\n                        }}\n                        legends={\n                            index + 1 === dataLength\n                                ? [\n                                      {\n                                          anchor: \"top-right\",\n                                          direction: \"column\",\n                                          itemWidth: 20,\n                                          itemHeight: 20,\n                                          translateY: 20,\n                                          translateX: 20\n                                          // symbolSize: 18,\n                                          // symbolShape: \"circle\"\n                                      }\n                                  ]\n                                : undefined\n                        }\n                    />\n                    {/* <div style={styles.overlay}>\n                        <span>{schoolYear}</span>\n                    </div> */}\n                </div>\n                <div style={{ flexGrow: \"1\" }}>{schoolName}</div>\n            </div>\n        );\n    });\n\n    if (pieCharts && pieCharts.length > 0) {\n        const heading = [];\n        heading.push(<h3 key={\"gender-heading\"}>Gender</h3>);\n        pieCharts = heading.concat(pieCharts);\n    }\n\n    return pieCharts;\n}\n\nfunction getTooltipHTML(data) {\n    return (\n        <div\n            style={{ display: \"flex\", flexDirection: \"column\", color: \"black\" }}\n        >\n            <div>\n                {data.label}: {data.value}\n            </div>\n            <div>Percentage: {data.percentage}%</div>\n        </div>\n    );\n}\n\nexport default GenderChart;\n","import React from \"react\";\nimport { ResponsivePie } from \"@nivo/pie\";\n// import { EntityType, EthnicityAcronymList } from \"../../Constants\";\n\n/**\n * Main class component\n * @param {*} props\n */\nfunction EthnicityChart(props) {\n    const chartData = getGroupedEthnicData(\n        props.schoolData,\n        props.options,\n        ethnicityAcronyms\n    );\n    const pieCharts = createPieCharts(chartData);\n    return (\n        <div\n            style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                height: \"50%\",\n                width: \"100%\"\n            }}\n        >\n            {pieCharts}\n        </div>\n    );\n}\n\n//\n// Helper Functions\n//\n\n/**\n * return array->[schoolName, array[schoolData]]\n * ignoring zero values\n */\nfunction getGroupedEthnicData(allData, options, ethnicityAcronymList) {\n    let chartData = [];\n    options.forEach(schoolName => {\n        const schoolObj = allData[schoolName];\n\n        let thisSchoolData = {};\n        let schoolDataArray = [];\n        // ethnicityAcronymList.forEach(ethnicityObj => {\n        //     schoolDataArray.push({\n        //         id: ethnicityObj.id,\n        //         value: parseInt(schoolObj[ethnicityObj.id]),\n        //         label: ethnicityObj.desc,\n        //         chartColor: ethnicityObj.chartColor\n        //     });\n        // });\n\n        schoolDataArray = schoolObj._ethnicity;\n\n        // get percentage calculation out of total students that we consider\n        let totalStudents = 0;\n        schoolDataArray.forEach(element => (totalStudents += element.value));\n        schoolDataArray.forEach(\n            element =>\n                (element.percentage = (\n                    (element.value / totalStudents) *\n                    100\n                ).toFixed(2))\n        );\n\n        thisSchoolData.schoolName = schoolName;\n        thisSchoolData.dataArray = schoolDataArray;\n        chartData.push(thisSchoolData);\n    });\n\n    return chartData;\n}\n\nconst pieChartParentDivStyle = {\n    height: \"300px\",\n    width: \"25%\",\n    minWidth: \"250px\",\n    flexGrow: \"1\",\n    display: \"flex\",\n    flexDirection: \"column\"\n};\n\nconst styles = {\n    root: {\n        fontFamily: \"consolas, sans-serif\",\n        textAlign: \"center\",\n        position: \"relative\",\n        width: 250,\n        height: 300\n    },\n\n    totalLabel: {\n        fontSize: 24\n    }\n};\n\nfunction createPieCharts(chartData) {\n    let pieCharts = [];\n    const dataLength = chartData.length;\n    chartData.forEach((row, index) => {\n        pieCharts.push(\n            <div key={row.schoolName} style={styles.root}>\n                <div style={{ height: \"90%\", flexGrow: \"1\" }}>\n                    <ResponsivePie\n                        key={row.schoolName}\n                        data={row.dataArray}\n                        margin={{ top: 40, right: 60, bottom: 40, left: 40 }}\n                        colors={d => d.chartColor}\n                        sortByValue={true}\n                        enableRadialLabels={false}\n                        enableSlicesLabels={false}\n                        innerRadius={0.5}\n                        tooltip={data => {\n                            return getTooltipHTML(data);\n                        }}\n                        legends={\n                            index + 1 === dataLength\n                                ? [\n                                      {\n                                          anchor: \"top-right\",\n                                          direction: \"column\",\n                                          itemWidth: 20,\n                                          itemHeight: 20,\n                                          translateY: 20,\n                                          translateX: 30\n                                          // symbolSize: 18,\n                                          // symbolShape: \"circle\"\n                                      }\n                                  ]\n                                : undefined\n                        }\n                    />\n                </div>\n                <div style={{ flexGrow: \"1\" }}>{row.schoolName}</div>\n            </div>\n        );\n    });\n\n    if (pieCharts && pieCharts.length > 0) {\n        const heading = [];\n        heading.push(<h3 key=\"ethnicityHeading\">Ethnicity</h3>);\n        pieCharts = heading.concat(pieCharts);\n    }\n\n    return pieCharts;\n}\n\nexport default EthnicityChart;\n\nconst ethnicityAcronyms = [\n    {\n        id: \"AA\",\n        desc: \"African American\",\n        chartColor: \"#f6d18a\"\n    },\n    {\n        id: \"AS\",\n        desc: \"Asian\",\n        chartColor: \"blue\"\n    },\n    {\n        id: \"HI\",\n        desc: \"Hispanic\",\n        chartColor: \"green\"\n    },\n    {\n        id: \"MR\",\n        desc: \"Multiracial\",\n        chartColor: \"yellow\"\n    },\n    {\n        id: \"NA\",\n        desc: \"NA\",\n        chartColor: \"pink\"\n    },\n    {\n        id: \"NH_PI\",\n        desc: \"Native Hawaiian and Pacific Islander\",\n        chartColor: \"red\"\n    },\n    {\n        id: \"WH\",\n        desc: \"White\",\n        chartColor: \"brown\"\n    }\n];\n\nfunction getTooltipHTML(data) {\n    return (\n        <div\n            id={data.id}\n            style={{ display: \"flex\", flexDirection: \"column\", color: \"black\" }}\n        >\n            <div>\n                {data.desc}: {data.value}\n            </div>\n            <div>Percentage: {data.percentage}%</div>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { ResponsivePie } from \"@nivo/pie\";\n// import School from \"../../School\";\n\n/**\n * Main class component\n * @param {*} props\n */\nfunction EconDisChart(props) {\n    const schoolDataArray = getEconDisForSchool(\n        props.schoolData,\n        props.options\n    );\n\n    let pieCharts = getPieCharts(schoolDataArray);\n\n    return (\n        <div\n            style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                height: \"50%\",\n                width: \"100%\"\n            }}\n        >\n            {pieCharts}\n        </div>\n    );\n}\n\n/**\n * return array: x->schoolName, male, female\n */\nfunction getEconDisForSchool(allData, options) {\n    let chartData = [];\n    options.forEach(schoolName => {\n        const schoolObject = allData[schoolName];\n\n        const disadvantagedCount = schoolObject._economicallyDisadvantaged;\n        const totalCount = schoolObject._enrolled;\n        const nonDisadvantagedCount = totalCount - disadvantagedCount;\n\n        const disadvantagedPercentage = (\n            (disadvantagedCount / totalCount) *\n            100\n        ).toFixed(2);\n        const nonDisadvantagedPercentage = (\n            (nonDisadvantagedCount / totalCount) *\n            100\n        ).toFixed(2);\n\n        let thisSchoolData = {};\n        let schoolDataArray = [\n            {\n                id: \"Disadvantaged\",\n                value: disadvantagedCount,\n                percentage: disadvantagedPercentage,\n                color: \"orange\",\n                label: \"Economically Disadvantaged\"\n            },\n            {\n                id: \"Others\",\n                value: nonDisadvantagedCount,\n                percentage: nonDisadvantagedPercentage,\n                color: \"blue\",\n                label: \"Others\"\n            }\n        ];\n        thisSchoolData.schoolName = schoolName;\n        thisSchoolData.dataArray = schoolDataArray;\n        chartData.push(thisSchoolData);\n    });\n\n    // console.log(\"econ dis chart\");\n    // console.log(chartData);\n    return chartData;\n}\n\nconst pieChartParentDivStyle = {\n    height: \"300px\",\n    width: \"25%\",\n    minWidth: \"250px\",\n    flexGrow: \"1\",\n    display: \"flex\",\n    flexDirection: \"column\"\n};\n\nconst styles = {\n    root: {\n        fontFamily: \"consolas, sans-serif\",\n        textAlign: \"center\",\n        position: \"relative\",\n        width: 250,\n        height: 300\n    },\n\n    totalLabel: {\n        fontSize: 24\n    }\n};\n\nfunction getPieCharts(schoolDataArray) {\n    const dataLength = schoolDataArray.length;\n    let pieCharts = [];\n\n    schoolDataArray.forEach((row, index) => {\n        const schoolName = row.schoolName;\n        const schoolData = row.dataArray;\n        pieCharts.push(\n            <div key={schoolName} style={styles.root}>\n                <div style={{ height: \"90%\", flexGrow: \"1\" }}>\n                    <ResponsivePie\n                        key={schoolName}\n                        colors={d => d.color}\n                        isInteractive={true}\n                        data={schoolData}\n                        sortByValue={true}\n                        enableSlicesLabels={false}\n                        enableRadialLabels={false}\n                        margin={{ top: 40, right: 40, bottom: 60, left: 40 }}\n                        innerRadius={0.5}\n                        tooltip={data => {\n                            return getTooltipHTML(data);\n                        }}\n                        legends={\n                            index + 1 === dataLength\n                                ? [\n                                      {\n                                          anchor: \"bottom\",\n                                          direction: \"row\",\n                                          itemWidth: 120,\n                                          itemHeight: 20,\n                                          translateY: 30,\n                                          translateX: 10\n                                      }\n                                  ]\n                                : undefined\n                        }\n                    />\n                </div>\n                <div style={{ flexGrow: \"1\" }}>{schoolName}</div>\n            </div>\n        );\n    });\n\n    if (pieCharts && pieCharts.length > 0) {\n        const heading = [];\n        heading.push(\n            // <h3 key={\"econdis-heading\"}>Economically Disadvantaged</h3>\n            <h3 key={\"econdis-heading\"}>EconDis</h3>\n        );\n        pieCharts = heading.concat(pieCharts);\n    }\n\n    return pieCharts;\n}\n\nfunction getTooltipHTML(data) {\n    return (\n        <div\n            style={{ display: \"flex\", flexDirection: \"column\", color: \"black\" }}\n        >\n            <div>\n                {data.label}: {data.value}\n            </div>\n            <div>Percentage: {data.percentage}%</div>\n        </div>\n    );\n}\n\nexport default EconDisChart;\n","import React from \"react\";\nimport { ResponsivePie } from \"@nivo/pie\";\n// import School from \"../../School\";\n\n/**\n * Main class component\n * @param {*} props\n */\nfunction DisabilityChart(props) {\n    const schoolDataArray = getDisabilityData(props.schoolData, props.options);\n\n    let pieCharts = getPieCharts(schoolDataArray);\n\n    return (\n        <div\n            style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                height: \"50%\",\n                width: \"100%\"\n            }}\n        >\n            {pieCharts}\n        </div>\n    );\n}\n\n/**\n * return array: x->schoolName, male, female\n */\nfunction getDisabilityData(allData, options) {\n    let chartData = [];\n    options.forEach(schoolName => {\n        const schoolObject = allData[schoolName];\n\n        const disabilityCount = schoolObject._studentsWithDisability;\n        const totalCount = schoolObject._enrolled;\n        const nonDisabilityCount = totalCount - disabilityCount;\n\n        const disabilityPercentage = (\n            (disabilityCount / totalCount) *\n            100\n        ).toFixed(2);\n        const nonDisabilityPercentage = (\n            (nonDisabilityCount / totalCount) *\n            100\n        ).toFixed(2);\n\n        let thisSchoolData = {};\n        let schoolDataArray = [\n            {\n                // id: \"Students With Disability\",\n                id: \"SWD\",\n                value: disabilityCount,\n                percentage: disabilityPercentage,\n                color: \"orange\",\n                label: \"Students With Disability\"\n                // Students With Disability\n            },\n            {\n                id: \"Others\",\n                value: nonDisabilityCount,\n                percentage: nonDisabilityPercentage,\n                color: \"blue\",\n                label: \"Others\"\n            }\n        ];\n        thisSchoolData.schoolName = schoolName;\n        thisSchoolData.dataArray = schoolDataArray;\n        chartData.push(thisSchoolData);\n    });\n\n    // console.log(\"disability chart\");\n    // console.log(chartData);\n    return chartData;\n}\n\nconst pieChartParentDivStyle = {\n    height: \"300px\",\n    width: \"25%\",\n    minWidth: \"250px\",\n    flexGrow: \"1\",\n    display: \"flex\",\n    flexDirection: \"column\"\n};\n\nconst styles = {\n    root: {\n        fontFamily: \"consolas, sans-serif\",\n        textAlign: \"center\",\n        position: \"relative\",\n        width: 250,\n        height: 300\n    },\n\n    totalLabel: {\n        fontSize: 24\n    }\n};\n\nfunction getPieCharts(schoolDataArray) {\n    const dataLength = schoolDataArray.length;\n    let pieCharts = [];\n\n    schoolDataArray.forEach((row, index) => {\n        const schoolName = row.schoolName;\n        const schoolData = row.dataArray;\n        pieCharts.push(\n            <div key={schoolName} style={styles.root}>\n                <div style={{ height: \"90%\", flexGrow: \"1\" }}>\n                    <ResponsivePie\n                        key={schoolName}\n                        colors={d => d.color}\n                        isInteractive={true}\n                        data={schoolData}\n                        sortByValue={true}\n                        enableSlicesLabels={false}\n                        enableRadialLabels={false}\n                        innerRadius={0.5}\n                        margin={{ top: 40, right: 60, bottom: 40, left: 40 }}\n                        tooltip={data => {\n                            return getTooltipHTML(data);\n                        }}\n                        legends={\n                            index + 1 === dataLength\n                                ? [\n                                      {\n                                          anchor: \"top-right\",\n                                          direction: \"column\",\n                                          itemWidth: 20,\n                                          itemHeight: 20,\n                                          translateY: 20,\n                                          translateX: 20\n                                          // symbolSize: 18,\n                                          // symbolShape: \"circle\"\n                                      }\n                                  ]\n                                : undefined\n                        }\n                    />\n                </div>\n                <div style={{ flexGrow: \"1\" }}>{schoolName}</div>\n            </div>\n        );\n    });\n\n    if (pieCharts && pieCharts.length > 0) {\n        const heading = [];\n        heading.push(\n            <div key={\"disability-heading\"}>\n                {/* <h3>Students With Disability</h3> */}\n                <h3>Disability</h3>\n            </div>\n        );\n        pieCharts = heading.concat(pieCharts);\n    }\n\n    return pieCharts;\n}\n\nfunction getTooltipHTML(data) {\n    return (\n        <div\n            style={{ display: \"flex\", flexDirection: \"column\", color: \"black\" }}\n        >\n            <div>\n                {data.label}: {data.value}\n            </div>\n            <div>Percentage: {data.percentage}%</div>\n        </div>\n    );\n}\n\nexport default DisabilityChart;\n","/**\n * English Language Learners\n */\n\nimport React from \"react\";\nimport { ResponsivePie } from \"@nivo/pie\";\n\n/**\n * Main class component\n * @param {*} props\n */\nfunction ELLChart(props) {\n    const schoolDataArray = getLanguageLearnerData(\n        props.schoolData,\n        props.options\n    );\n\n    let pieCharts = getPieCharts(schoolDataArray);\n\n    return (\n        <div\n            style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                height: \"50%\",\n                width: \"100%\"\n            }}\n        >\n            {pieCharts}\n        </div>\n    );\n}\n\n/**\n * return array: x->schoolName, male, female\n */\nfunction getLanguageLearnerData(allData, options) {\n    let chartData = [];\n    options.forEach(schoolName => {\n        const schoolObject = allData[schoolName];\n\n        const languageLearnerCount = schoolObject._englishLanguageLearner;\n        const totalCount = schoolObject._enrolled;\n        const otherCount = totalCount - languageLearnerCount;\n\n        const learnerPercentage = (\n            (languageLearnerCount / totalCount) *\n            100\n        ).toFixed(2);\n        const otherPercentage = ((otherCount / totalCount) * 100).toFixed(2);\n\n        let thisSchoolData = {};\n        let schoolDataArray = [\n            {\n                // id: \"Students With Disability\",\n                id: \"ELL\",\n                value: languageLearnerCount,\n                percentage: learnerPercentage,\n                color: \"orange\",\n                label: \"English Language Learner\"\n            },\n            {\n                id: \"Others\",\n                value: otherCount,\n                percentage: otherPercentage,\n                color: \"blue\",\n                label: \"Others\"\n            }\n        ];\n        thisSchoolData.schoolName = schoolName;\n        thisSchoolData.dataArray = schoolDataArray;\n        chartData.push(thisSchoolData);\n    });\n\n    return chartData;\n}\n\nconst styles = {\n    root: {\n        fontFamily: \"consolas, sans-serif\",\n        textAlign: \"center\",\n        position: \"relative\",\n        width: 250,\n        height: 300\n    },\n\n    totalLabel: {\n        fontSize: 24\n    }\n};\n\nfunction getPieCharts(schoolDataArray) {\n    const dataLength = schoolDataArray.length;\n    let pieCharts = [];\n\n    schoolDataArray.forEach((row, index) => {\n        const schoolName = row.schoolName;\n        const schoolData = row.dataArray;\n        pieCharts.push(\n            <div key={schoolName} style={styles.root}>\n                <div style={{ height: \"90%\", flexGrow: \"1\" }}>\n                    <ResponsivePie\n                        key={schoolName}\n                        colors={d => d.color}\n                        isInteractive={true}\n                        data={schoolData}\n                        sortByValue={true}\n                        enableSlicesLabels={false}\n                        enableRadialLabels={false}\n                        innerRadius={0.5}\n                        margin={{ top: 40, right: 60, bottom: 40, left: 40 }}\n                        tooltip={data => {\n                            return getTooltipHTML(data);\n                        }}\n                        legends={\n                            index + 1 === dataLength\n                                ? [\n                                      {\n                                          anchor: \"bottom\",\n                                          direction: \"row\",\n                                          itemWidth: 120,\n                                          itemHeight: 20,\n                                          translateY: 30,\n                                          translateX: 10\n                                      }\n                                  ]\n                                : undefined\n                        }\n                    />\n                </div>\n                <div style={{ flexGrow: \"1\" }}>{schoolName}</div>\n            </div>\n        );\n    });\n\n    if (pieCharts && pieCharts.length > 0) {\n        const heading = [];\n        heading.push(\n            <div key={\"ell-heading\"}>\n                {/* <h3>English Language Learners</h3> */}\n                <h3>Learners</h3>\n            </div>\n        );\n        pieCharts = heading.concat(pieCharts);\n    }\n\n    return pieCharts;\n}\n\nfunction getTooltipHTML(data) {\n    return (\n        <div\n            style={{ display: \"flex\", flexDirection: \"column\", color: \"black\" }}\n        >\n            <div>\n                {data.label}: {data.value}\n            </div>\n            <div>Percentage: {data.percentage}%</div>\n        </div>\n    );\n}\n\nexport default ELLChart;\n","import React from \"react\";\n\nfunction NextStepsPanel() {\n    const styles = {\n        action: {\n            margin: \"10px\",\n            width: \"50%\",\n            borderStyle: \"ridge\",\n            borderWidth: \"2px\",\n            padding: \"10px\"\n        },\n        row: {\n            display: \"flex\",\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            margin: \"10px\",\n            width: \"70%\"\n        },\n\n        header: {\n            height: \"30%\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            display: \"flex\",\n            fontSize: \"xx-large\"\n        },\n        learn: {\n            height: \"30%\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            display: \"flex\",\n            fontSize: \"22px\",\n            width: \"100%\"\n        },\n        footer: {\n            display: \"flex\",\n            flexDirection: \"row-reverse\",\n            backgroundColor: \"#674063\",\n            height: \"10%\",\n            alignItems: \"center\",\n            fontSize: \"20px\"\n        }\n    };\n\n    return (\n        <div\n            className=\"App\"\n            style={{\n                display: \"flex\",\n                minHeight: \"90vh\",\n                flexDirection: \"column\",\n                backgroundColor: \"#d24242\",\n                width: \"100%\"\n            }}\n        >\n            <div style={styles.header}>\n                <h2 className=\"next-steps-panel\">Next Steps</h2>\n            </div>\n            <div\n                style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    alignItems: \"center\",\n                    fontSize: \"x-large\",\n                    height: \"30%\"\n                }}\n            >\n                <div style={styles.row}>\n                    <div style={styles.action}>\n                        Closing the Digital Equity Gap\n                    </div>\n                    <div style={styles.action}>The Digital Equity Walk</div>\n                </div>\n                <div style={styles.row}>\n                    <div style={styles.action}>The Walk in Action</div>\n                    <div style={styles.action}>Take the Virtual Walk</div>\n                </div>\n            </div>\n            <div style={styles.learn}>\n                <span style={{ width: \"60%\" }}>\n                    Want to learn more about the Digital Equity Walk or about\n                    opportunities to host a walk? Visit the Digital Equity Walk\n                    in Action or contact Jackney Prioly Joseph.\n                </span>\n            </div>\n            <div style={styles.footer}>\n                <span style={{ marginRight: \"20px\" }}>Contact Info</span>\n            </div>\n        </div>\n    );\n}\n\nexport default NextStepsPanel;\n","import { EntityType } from \"./Constants\";\n\nclass School {\n    constructor() {\n        this._male = 0;\n        this._female = 0;\n        this._ethnicity = [];\n        this._ethnicityMap = {};\n        this._districtName = \"\";\n        this._type = 0;\n        this._name = \"\";\n        this._economicallyDisadvantaged = 0;\n        this._enrolled = 0;\n        this._testTakers = 0;\n        this._studentsWithDisability = 0;\n        this._schoolYear = 2016;\n        this._englishLanguageLearner = 0;\n    }\n\n    setType(entityType) {\n        if (entityType === EntityType.SCHOOL || EntityType.DISTRICT) {\n            this._type = entityType;\n        } else {\n            this._type = EntityType.SCHOOL;\n            console.log(\"error setting entity\");\n        }\n    }\n\n    setMale(maleCount) {\n        // add error check\n        this._male = maleCount;\n    }\n\n    setFemale(femaleCount) {\n        // add error check\n        this._female = femaleCount;\n    }\n\n    setEthnicity(ethnicityObj) {\n        // add error check\n        this._ethnicity = ethnicityObj;\n    }\n\n    setEthnicityMap(ethnicityMap) {\n        // add error check\n        this._ethnicityMap = ethnicityMap;\n    }\n\n    setDistrictName(districtName) {\n        // add error check\n        this._districtName = districtName;\n    }\n\n    setName(name) {\n        this._name = name;\n    }\n\n    setEconomicallyDisadvantaged(count) {\n        this._economicallyDisadvantaged = count;\n    }\n\n    setEnrolled(count) {\n        this._enrolled = count;\n    }\n\n    setTestTakers(count) {\n        this._testTakers = count;\n    }\n\n    setStudentsWithDisability(count) {\n        this._studentsWithDisability = count;\n    }\n\n    setSchoolYear(year) {\n        this._schoolYear = year;\n    }\n\n    setEnglishLanguageLearner(count) {\n        this._englishLanguageLearner = count;\n    }\n}\n\nexport default School;\n","/*eslint-env es6*/\n// \"use strict\";\n\nimport React from \"react\";\nimport \"./App.css\";\nimport FilterPanel from \"./components/FilterPanel/FilterPanel\";\nimport GenderChart from \"./components/ChartPanel/GenderChart\";\n// import GenderChart2 from \"./components/ChartPanel/GenderChart2\";\nimport EthnicityChart from \"./components/ChartPanel/EthnicityChart\";\nimport EconDisChart from \"./components/ChartPanel/EconDisChart\";\nimport DisabilityChart from \"./components/ChartPanel/DisabilityChart\";\nimport ELLChart from \"./components/ChartPanel/ELLChart\";\nimport NextStepsPanel from \"./components/NextStepsPanel\";\n\nimport schoolData from \"./data/data-2016\";\n// import { log } from \"util\";\nimport {\n    EntityType,\n    EthnicityAcronymList,\n    EthnicityDefaultMap\n} from \"./Constants\";\nimport School from \"./School\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.graphSelectionChangeHandler = this.graphSelectionChangeHandler.bind(\n            this\n        );\n        this.state = {\n            schoolData: this.transformSchoolData(schoolData),\n            newSchoolData: this.extractSchoolData(schoolData),\n            schoolOptions: [\"Massachussets\"],\n            selectedFilters: {\n                gender: true,\n                ethnicity: true,\n                economicallyDisadvantaged: false,\n                disability: false,\n                englishLanguageLearner: true\n            }\n        };\n    }\n\n    render() {\n        const charts = this.createChartsFromFilterState();\n\n        return (\n            <div\n                className=\"App\"\n                style={{ display: \"flex\", flexDirection: \"column\" }}\n            >\n                <div style={{ height: \"10%\" }}>\n                    <h3> Digital Equity </h3>\n                </div>\n                <div className=\"App\" style={{ display: \"flex\" }}>\n                    <div className=\"filter-panel\">\n                        <FilterPanel\n                            data={this.state.newSchoolData}\n                            selectedFilters={this.state.selectedFilters}\n                            onSchoolFilterChange={(opts, actionMeta) =>\n                                this.schoolFilterChangeHandler(opts, actionMeta)\n                            }\n                            onGraphSelectionChange={\n                                this.graphSelectionChangeHandler\n                            }\n                        ></FilterPanel>\n                    </div>\n                    <div className=\"chart-panel\">{charts}</div>\n                </div>\n                <NextStepsPanel />\n            </div>\n        );\n    }\n\n    createChartsFromFilterState() {\n        const selectedFilters = this.state.selectedFilters;\n\n        let charts = [];\n        if (selectedFilters.gender === true) {\n            charts.push(\n                <GenderChart\n                    options={this.state.schoolOptions}\n                    schoolData={this.state.newSchoolData}\n                    key=\"genderChart\"\n                />\n            );\n        }\n\n        if (selectedFilters.ethnicity === true) {\n            charts.push(\n                <EthnicityChart\n                    options={this.state.schoolOptions}\n                    schoolData={this.state.newSchoolData}\n                    key=\"ethnicityChart\"\n                />\n            );\n        }\n\n        if (selectedFilters.economicallyDisadvantaged === true) {\n            charts.push(\n                <EconDisChart\n                    options={this.state.schoolOptions}\n                    schoolData={this.state.newSchoolData}\n                    key=\"economicallyDisadvantagedChart\"\n                />\n            );\n        }\n\n        if (selectedFilters.disability === true) {\n            charts.push(\n                <DisabilityChart\n                    options={this.state.schoolOptions}\n                    schoolData={this.state.newSchoolData}\n                    key=\"disabilityChart\"\n                />\n            );\n        }\n\n        if (selectedFilters.englishLanguageLearner === true) {\n            charts.push(\n                <ELLChart\n                    options={this.state.schoolOptions}\n                    schoolData={this.state.newSchoolData}\n                    key=\"disabilityChart\"\n                />\n            );\n        }\n\n        return charts;\n    }\n\n    graphSelectionChangeHandler(newSelection) {\n        this.setState({\n            selectedFilters: newSelection\n        });\n    }\n\n    schoolFilterChangeHandler(selectedOptions, actionMeta) {\n        console.log(actionMeta);\n        if (!selectedOptions) {\n            selectedOptions = [];\n        }\n        this.setState({\n            schoolOptions: this.transformSelectedOptions(selectedOptions)\n        });\n    }\n\n    /**\n     *\n     * @param {array} schoolDataArray\n     * @returns {Object} SchoolName -> SchoolData\n     */\n    transformSchoolData(schoolDataArray) {\n        let schoolDataMap = {};\n        schoolDataArray.forEach(schoolRow => {\n            schoolDataMap[schoolRow[\"SCH_NAME\"]] = schoolRow;\n        });\n        return schoolDataMap;\n    }\n\n    transformSelectedOptions(selectedOptions) {\n        let schoolNameArray = [];\n        selectedOptions.forEach(row => {\n            schoolNameArray.push(row.label);\n        });\n        return schoolNameArray;\n    }\n\n    extractSchoolData(schoolDataArray) {\n        let filteredArray = [];\n        let schoolObjectMap = {};\n\n        //  TODO: do this by year\n\n        filteredArray = this.filterSchoolDataWithFields(schoolDataArray);\n        schoolObjectMap = this.getSchoolObjectMap(filteredArray);\n\n        // add info for all districts\n        const allSchoolNames = Object.keys(schoolObjectMap);\n        for (let schoolName of allSchoolNames) {\n            const schoolObject = schoolObjectMap[schoolName];\n            const districtName = schoolObject._districtName;\n\n            let districtObject = schoolObjectMap[districtName];\n            if (!districtObject) {\n                districtObject = new School();\n                districtObject.setName(districtName);\n                districtObject.setType(EntityType.DISTRICT);\n                districtObject.setEthnicityMap(EthnicityDefaultMap);\n            } else {\n                // console.log(districtName);\n                // console.log(schoolName);\n            }\n            districtObject.setMale(districtObject._male + schoolObject._male);\n            districtObject.setFemale(\n                districtObject._female + schoolObject._female\n            );\n\n            districtObject.setEconomicallyDisadvantaged(\n                districtObject._economicallyDisadvantaged +\n                    schoolObject._economicallyDisadvantaged\n            );\n\n            districtObject.setEnrolled(\n                districtObject._enrolled + schoolObject._enrolled\n            );\n            districtObject.setStudentsWithDisability(\n                districtObject._studentsWithDisability +\n                    schoolObject._studentsWithDisability\n            );\n\n            let thisDistrictEthnicityArray = [];\n            let thisDistrictEthnicityMap = districtObject._ethnicityMap;\n\n            for (let key in schoolObject._ethnicityMap) {\n                const ethnicityObj = schoolObject._ethnicityMap[key];\n                thisDistrictEthnicityMap[key].value += ethnicityObj.value;\n                thisDistrictEthnicityArray.push(thisDistrictEthnicityMap[key]);\n            }\n\n            districtObject.setEthnicityMap(thisDistrictEthnicityMap);\n            districtObject.setEthnicity(thisDistrictEthnicityArray);\n\n            districtObject.setEnglishLanguageLearner(\n                districtObject._englishLanguageLearner +\n                    schoolObject._englishLanguageLearner\n            );\n\n            schoolObjectMap[districtName] = districtObject;\n        }\n\n        // console.log(\"schoolObjectMap\");\n        // console.log(schoolObjectMap);\n        return schoolObjectMap;\n    }\n\n    // only use schooldata that have the fields available\n    filterSchoolDataWithFields(schoolDataArray) {\n        let filteredArray = [];\n        let schoolsWithMissingEntry = [];\n        // filter out schools with all available data\n        schoolDataArray.forEach(schoolRow => {\n            if (\n                Number.isInteger(parseInt(schoolRow[\"FEMALE\"])) &&\n                Number.isInteger(parseInt(schoolRow[\"MALE\"])) &&\n                schoolRow[\"DIST_NAME\"] &&\n                Number.isInteger(parseInt(schoolRow[\"ECODIS\"])) &&\n                Number.isInteger(parseInt(schoolRow[\"SWD\"])) &&\n                Number.isInteger(parseInt(schoolRow[\"SY\"])) &&\n                Number.isInteger(parseInt(schoolRow[\"ELL\"]))\n            ) {\n                filteredArray.push(schoolRow);\n            } else {\n                schoolsWithMissingEntry.push(schoolRow);\n            }\n        });\n\n        if (schoolsWithMissingEntry.length > 0) {\n            console.log(\"missing entry for schools: \");\n            console.log(schoolsWithMissingEntry);\n        }\n\n        return filteredArray;\n    }\n\n    getSchoolObjectMap(filteredArray) {\n        let schoolObjectMap = {};\n\n        // add all school data\n        filteredArray.forEach(schoolRow => {\n            const schoolName = schoolRow[\"SCH_NAME\"];\n            const districtName = schoolRow[\"DIST_NAME\"];\n\n            let thisSchool = new School();\n            thisSchool.setName(schoolName);\n            thisSchool.setType(EntityType.SCHOOL);\n            thisSchool.setMale(parseInt(schoolRow[\"MALE\"]));\n            thisSchool.setFemale(parseInt(schoolRow[\"FEMALE\"]));\n            thisSchool.setDistrictName(districtName);\n            thisSchool.setEthnicity([]);\n            thisSchool.setEconomicallyDisadvantaged(\n                parseInt(schoolRow[\"ECODIS\"])\n            );\n            thisSchool.setEnrolled(parseInt(schoolRow[\"STUDENTS_ENROLLED\"]));\n            thisSchool.setStudentsWithDisability(parseInt(schoolRow[\"SWD\"]));\n            thisSchool.setSchoolYear(parseInt(schoolRow[\"SY\"]));\n            thisSchool.setEnglishLanguageLearner(parseInt(schoolRow[\"ELL\"]));\n\n            let thisSchoolEthnicityArray = [];\n            let thisSchoolEthnicityMap = {};\n\n            EthnicityAcronymList.forEach(ethnicityObj => {\n                let ethnicityArrayMember = {\n                    id: ethnicityObj.id,\n                    value: parseInt(schoolRow[ethnicityObj.id]),\n                    label: ethnicityObj.desc,\n                    desc: ethnicityObj.desc,\n                    chartColor: ethnicityObj.chartColor\n                };\n\n                thisSchoolEthnicityArray.push(ethnicityArrayMember);\n                thisSchoolEthnicityMap[\n                    ethnicityArrayMember.id\n                ] = ethnicityArrayMember;\n            });\n\n            thisSchool.setEthnicity(thisSchoolEthnicityArray);\n            thisSchool.setEthnicityMap(thisSchoolEthnicityMap);\n\n            schoolObjectMap[schoolName] = thisSchool;\n        });\n\n        return schoolObjectMap;\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}