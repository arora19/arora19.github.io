{"version":3,"sources":["Constants.js","components/Filters/SchoolDistrictFilter.js","components/Filters/PrimaryGraphsChoose.js","components/Filters/YearFilter.js","components/FilterPanel/FilterPanel.js","components/Charts/GenderChart.js","components/Charts/EthnicityChart.js","components/Charts/EconDisChart.js","components/Charts/DisabilityChart.js","components/Charts/ELLChart.js","components/NextStepsPanel.js","School.js","App.js","serviceWorker.js","index.js"],"names":["EntityType","SCHOOL","DISTRICT","EthnicityAcronymList","id","desc","chartColor","EthnicityDefaultMap","AA","value","AS","HI","MR","NA","NH_PI","WH","YearList","Menu","props","optionSelectedLength","getValue","length","children","style","margin","SchoolDistrictFilter","filteredSchools","data","schoolSet","schoolData","schools","Set","schoolName","schoolRow","_type","add","_name","getSchools","districtSet","getDistricts","schoolOptions","optionList","concat","label","createSchoolOptions","districtOptions","districtName","createDistrictOptions","allOptions","display","flexDirection","padding","color","components","isValidNewOption","inputValue","selectValue","options","defaultValue","filter","option","isMulti","required","onChange","selectedOptions","actionMeta","onOptionsChange","styles","checkbox","marginTop","PrimaryGraphChoose","textAlign","type","optionChooseClicKHandler","checked","selectedFilters","gender","ethnicity","economicallyDisadvantaged","disability","englishLanguageLearner","targetId","target","newTargetVal","newState","onSelectionChange","YearFilter","yearList","checkboxDivList","forEach","year","push","selectedYears","getCheckBoxListForYears","FilterPanel","className","onSchoolFilterChange","PrimaryGraphsChoose","newSelection","onGraphSelectionChange","root","fontFamily","position","width","height","overlay","top","right","bottom","left","alignItems","justifyContent","fontSize","pointerEvents","totalLabel","GenderChart","pieCharts","schoolDataArray","dataLength","row","index","dataArray","schoolYear","console","log","key","flexGrow","colors","d","isInteractive","sortByValue","enableSlicesLabels","enableRadialLabels","innerRadius","tooltip","percentage","getTooltipHTML","legends","anchor","direction","itemWidth","itemHeight","translateY","translateX","undefined","heading","getPieCharts","allData","selectedSchools","chartData","_schoolYear","maleCount","_male","femaleCount","_female","thisSchoolData","toFixed","getGenderForSchool","selectedSchoolOptions","EthnicityChart","createPieCharts","ethnicityAcronymList","_ethnicity","totalStudents","element","getGroupedEthnicData","EconDisChart","schoolObject","disadvantagedCount","_economicallyDisadvantaged","totalCount","_enrolled","nonDisadvantagedCount","getEconDisForSchool","DisabilityChart","disabilityCount","_studentsWithDisability","nonDisabilityCount","getDisabilityData","ELLChart","languageLearnerCount","_englishLanguageLearner","otherCount","getLanguageLearnerData","NextStepsPanel","action","borderStyle","borderWidth","header","learn","footer","backgroundColor","minHeight","marginRight","School","this","_ethnicityMap","_districtName","_testTakers","entityType","ethnicityObj","ethnicityMap","name","count","App","graphSelectionChangeHandler","bind","state","newSchoolData","transformSchoolData","extractSchoolData","charts","createChartsFromFilterState","opts","schoolFilterChangeHandler","setState","transformSelectedOptions","validDataArray","schoolObjectArray","filterSchoolDataWithFields","getSchoolObjectArray","filterSchoolData","Object","keys","allSchoolNames","thisYearSchoolObjectMap","districtObject","setName","setType","setEthnicityMap","setSchoolYear","setMale","setFemale","setEconomicallyDisadvantaged","setEnrolled","setStudentsWithDisability","thisDistrictEthnicityArray","thisDistrictEthnicityMap","setEthnicity","setEnglishLanguageLearner","schoolNameArray","filteredArray","schoolObjectMap","getSchoolObjectMap","schoolsWithMissingEntry","Number","isInteger","parseInt","thisSchool","setDistrictName","thisSchoolEthnicityArray","thisSchoolEthnicityMap","ethnicityArrayMember","yearSchoolObjectMap","selectedSchoolsArray","selectedYearsMap","selectedSchoolsMap","filteredSchoolData","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f2b93d62.chunk.js","sourcesContent":["export const EntityType = {\n    SCHOOL: 0,\n    DISTRICT: 1\n};\n\nexport const EthnicityAcronymList = [\n    {\n        id: \"AA\",\n        desc: \"African American\",\n        chartColor: \"#f6d18a\"\n    },\n    {\n        id: \"AS\",\n        desc: \"Asian\",\n        chartColor: \"blue\"\n    },\n    {\n        id: \"HI\",\n        desc: \"Hispanic\",\n        chartColor: \"green\"\n    },\n    {\n        id: \"MR\",\n        desc: \"Multiracial\",\n        chartColor: \"yellow\"\n    },\n    {\n        id: \"NA\",\n        desc: \"NA\",\n        chartColor: \"pink\"\n    },\n    {\n        id: \"NH_PI\",\n        desc: \"Native Hawaiian and Pacific Islander\",\n        chartColor: \"red\"\n    },\n    {\n        id: \"WH\",\n        desc: \"White\",\n        chartColor: \"brown\"\n    }\n];\n\nexport const EthnicityDefaultMap = {\n    AA: {\n        id: \"AA\",\n        desc: \"African American\",\n        chartColor: \"#f6d18a\",\n        value: 0\n    },\n    AS: {\n        id: \"AS\",\n        desc: \"Asian\",\n        chartColor: \"blue\",\n        value: 0\n    },\n    HI: {\n        id: \"HI\",\n        desc: \"Hispanic\",\n        chartColor: \"green\",\n        value: 0\n    },\n    MR: {\n        id: \"MR\",\n        desc: \"Multiracial\",\n        chartColor: \"yellow\",\n        value: 0\n    },\n    NA: {\n        id: \"NA\",\n        desc: \"NA\",\n        chartColor: \"pink\",\n        value: 0\n    },\n    NH_PI: {\n        id: \"NH_PI\",\n        desc: \"Native Hawaiian and Pacific Islander\",\n        chartColor: \"red\",\n        value: 0\n    },\n    WH: {\n        id: \"WH\",\n        desc: \"White\",\n        chartColor: \"brown\",\n        value: 0\n    }\n};\n\nexport const YearList = [2016, 2017, 2018];\n","import React from \"react\";\nimport Select from \"react-select\";\n\nimport Creatable from \"react-select/creatable\";\nimport { components } from \"react-select\";\n\nimport { EntityType } from \"../../Constants\";\n\nfunction SchoolDistrictFilter(props) {\n    const filteredSchools = filterSchooldata(props.data);\n\n    const schoolSet = getSchools(filteredSchools);\n    const districtSet = getDistricts(filteredSchools);\n    const schoolOptions = createSchoolOptions(schoolSet);\n    const districtOptions = createDistrictOptions(districtSet);\n    const allOptions = schoolOptions.concat(districtOptions);\n\n    const isValidNewOption = (inputValue, selectValue) =>\n        inputValue.length > 0 && selectValue.length < 5;\n\n    return (\n        <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n            <div style={{ padding: \"10px\" }}>\n                Select School / District to compare\n            </div>\n            <div style={{ color: \"black\" }}>\n                {/* <Select\n                    options={allOptions}\n                    defaultValue={allOptions.filter(\n                        option => option.label === \"Massachussets\"\n                    )}\n                    isMulti\n                    onChange={selectedOptions =>\n                        props.onOptionsChange(selectedOptions)\n                    }\n                /> */}\n\n                <Creatable\n                    components={{ Menu }}\n                    isValidNewOption={isValidNewOption}\n                    options={allOptions}\n                    defaultValue={allOptions.filter(\n                        option => option.label === \"Massachussets\"\n                    )}\n                    isMulti\n                    required\n                    onChange={(selectedOptions, actionMeta) =>\n                        props.onOptionsChange(selectedOptions, actionMeta)\n                    }\n                />\n            </div>\n        </div>\n    );\n}\n\nconst Menu = props => {\n    const optionSelectedLength = props.getValue().length || 0;\n    return (\n        <components.Menu {...props}>\n            {optionSelectedLength < 3 ? (\n                props.children\n            ) : (\n                <div style={{ margin: 15 }}>\n                    Cannot view more than 3 schools/districts\n                </div>\n            )}\n        </components.Menu>\n    );\n};\n\n// function App() {\n//     const isValidNewOption = (inputValue, selectValue) =>\n//         inputValue.length > 0 && selectValue.length < 5;\n//     return (\n//         <div className=\"App\">\n//             <Creatable\n//                 components={{ Menu }}\n//                 isMulti\n//                 isValidNewOption={isValidNewOption}\n//                 options={options}\n//             />\n//         </div>\n//     );\n// }\n\nfunction filterSchooldata(schoolData) {\n    return schoolData;\n}\n\nfunction getSchools(schoolData) {\n    let schools = new Set();\n    for (let schoolName in schoolData) {\n        const schoolRow = schoolData[schoolName];\n        if (schoolRow._type === EntityType.SCHOOL) {\n            schools.add(schoolRow._name);\n        }\n    }\n\n    return schools;\n}\n\nfunction createSchoolOptions(schoolSet) {\n    let optionList = [];\n    for (let schoolName of schoolSet) {\n        optionList = optionList.concat({\n            value: schoolName,\n            label: schoolName\n        });\n    }\n    return optionList;\n}\n\nfunction getDistricts(schoolData) {\n    let districtSet = new Set();\n    for (let schoolName in schoolData) {\n        const schoolRow = schoolData[schoolName];\n        if (schoolRow._type === EntityType.DISTRICT) {\n            districtSet.add(schoolRow._name);\n        }\n    }\n\n    return districtSet;\n}\n\nfunction createDistrictOptions(districtSet) {\n    let optionList = [];\n    for (let districtName of districtSet) {\n        optionList = optionList.concat({\n            value: districtName,\n            label: districtName\n        });\n    }\n    return optionList;\n}\n\nexport default SchoolDistrictFilter;\n","import React from \"react\";\n\nconst styles = {\n    checkbox: {\n        marginTop: \"5px\"\n    }\n};\n\nfunction PrimaryGraphChoose(props) {\n    // console.log(props);\n\n    return (\n        <div\n            style={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                textAlign: \"left\"\n            }}\n        >\n            <div style={{ padding: \"10px\" }}>Select To View:</div>\n            <div>\n                <div style={styles.checkbox}>\n                    <input\n                        type=\"checkbox\"\n                        id=\"gender\"\n                        onChange={option =>\n                            optionChooseClicKHandler(props, option)\n                        }\n                        checked={props.selectedFilters.gender}\n                    />\n                    <label>Gender</label>\n                </div>\n                <div style={styles.checkbox}>\n                    <input\n                        type=\"checkbox\"\n                        id=\"ethnicity\"\n                        onChange={option =>\n                            optionChooseClicKHandler(props, option)\n                        }\n                        checked={props.selectedFilters.ethnicity}\n                    />\n                    <label>Ethnicity</label>\n                </div>\n\n                <div style={styles.checkbox}>\n                    <input\n                        type=\"checkbox\"\n                        id=\"economicallyDisadvantaged\"\n                        onChange={option =>\n                            optionChooseClicKHandler(props, option)\n                        }\n                        checked={\n                            props.selectedFilters.economicallyDisadvantaged\n                        }\n                    />\n                    <label>Economically Disadvantaged</label>\n                </div>\n\n                <div style={styles.checkbox}>\n                    <input\n                        type=\"checkbox\"\n                        id=\"disability\"\n                        onChange={option =>\n                            optionChooseClicKHandler(props, option)\n                        }\n                        checked={props.selectedFilters.disability}\n                    />\n                    <label>Students With Disability</label>\n                </div>\n\n                <div style={styles.checkbox}>\n                    <input\n                        type=\"checkbox\"\n                        id=\"englishLanguageLearner\"\n                        onChange={option =>\n                            optionChooseClicKHandler(props, option)\n                        }\n                        checked={props.selectedFilters.englishLanguageLearner}\n                    />\n                    <label>English Language Learners</label>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default PrimaryGraphChoose;\n\nfunction optionChooseClicKHandler(props, option) {\n    const targetId = option.target.id;\n    const newTargetVal = option.target.checked;\n    const oldState = props.selectedFilters;\n\n    let newState = oldState;\n    newState[targetId] = newTargetVal;\n    props.onSelectionChange(newState);\n}\n","import React from \"react\";\nimport { YearList } from \"../../Constants\";\n\nconst styles = {\n    checkbox: {\n        marginTop: \"5px\"\n    }\n};\n\nfunction YearFilter(props) {\n    return (\n        <div\n            style={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                textAlign: \"left\"\n            }}\n        >\n            <div style={{ padding: \"10px\" }}>Select Years to view</div>\n            <div>{getCheckBoxListForYears(YearList, props)}</div>\n        </div>\n    );\n}\n\nfunction getCheckBoxListForYears(yearList, props) {\n    let checkboxDivList = [];\n\n    yearList.forEach(year => {\n        checkboxDivList.push(\n            <div style={styles.checkbox}>\n                <input\n                    type=\"checkbox\"\n                    id={\"year-\" + year}\n                    // onChange={option =>\n                    //     optionChooseClicKHandler(props, option)\n                    // }\n                    checked={props.selectedYears[year]}\n                />\n                <label>{year}</label>\n            </div>\n        );\n    });\n\n    return checkboxDivList;\n}\n\nexport default YearFilter;\n","import React from \"react\";\nimport SchoolDistrictFilter from \"../Filters/SchoolDistrictFilter\";\nimport PrimaryGraphsChoose from \"../Filters/PrimaryGraphsChoose\";\nimport YearFilter from \"../Filters/YearFilter\";\n\n// defaultSchoolOptions =\n\nfunction FilterPanel(props) {\n    // console.log('panel recieved school data' + props.data);\n\n    return (\n        <div>\n            <h3 style={{ margin: \"10px 0 10px 0\" }}>\n                Select filters below to view a graph\n            </h3>\n            <div\n                className=\"filter-container\"\n                style={{ display: \"flex\", flexDirection: \"column\" }}\n            >\n                <div>\n                    <SchoolDistrictFilter\n                        data={props.data}\n                        onOptionsChange={(selectedOptions, actionMeta) =>\n                            props.onSchoolFilterChange(\n                                selectedOptions,\n                                actionMeta\n                            )\n                        }\n                    ></SchoolDistrictFilter>\n                </div>\n                <div>\n                    <YearFilter\n                        selectedYears={props.selectedYears}\n                    ></YearFilter>\n                </div>\n                <div>\n                    <PrimaryGraphsChoose\n                        selectedFilters={props.selectedFilters}\n                        onSelectionChange={newSelection =>\n                            props.onGraphSelectionChange(newSelection)\n                        }\n                    />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default FilterPanel;\n","import React from \"react\";\nimport { ResponsivePie } from \"@nivo/pie\";\n// import School from \"../../School\";\n\n/**\n * Main class component\n * @param {*} props\n */\nfunction GenderChart(props) {\n    const schoolDataArray = getGenderForSchool(\n        props.schoolData,\n        props.selectedSchoolOptions\n    );\n\n    let pieCharts = getPieCharts(schoolDataArray);\n\n    return (\n        <div\n            style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                height: \"50%\",\n                width: \"100%\"\n            }}\n        >\n            {pieCharts}\n        </div>\n    );\n}\n\n/**\n * return array: x->schoolName, male, female\n */\nfunction getGenderForSchool(allData, selectedSchools) {\n    let chartData = [];\n    selectedSchools.forEach(schoolName => {\n        const schoolRow = allData[schoolName];\n\n        const schoolYear = schoolRow._schoolYear;\n        const maleCount = schoolRow._male;\n        const femaleCount = schoolRow._female;\n        const malePercentage = (\n            (maleCount / (maleCount + femaleCount)) *\n            100\n        ).toFixed(2);\n        const femalePercentage = (\n            (femaleCount / (maleCount + femaleCount)) *\n            100\n        ).toFixed(2);\n\n        let thisSchoolData = {};\n        let schoolDataArray = [\n            {\n                id: \"male\",\n                value: maleCount,\n                percentage: malePercentage,\n                color: \"orange\",\n                label: \"Male\"\n            },\n            {\n                id: \"female\",\n                value: femaleCount,\n                percentage: femalePercentage,\n                color: \"blue\",\n                label: \"Female\"\n            }\n        ];\n        thisSchoolData.schoolName = schoolName;\n        thisSchoolData.dataArray = schoolDataArray;\n        thisSchoolData.schoolYear = schoolYear;\n        chartData.push(thisSchoolData);\n    });\n\n    return chartData;\n}\n\nconst pieChartParentDivStyle = {\n    height: \"300px\",\n    width: \"25%\",\n    minWidth: \"250px\",\n    flexGrow: \"1\",\n    display: \"flex\",\n    flexDirection: \"column\"\n};\n\nconst margin = { top: 30, right: 200, bottom: 30, left: 30 };\n\nconst styles = {\n    root: {\n        fontFamily: \"consolas, sans-serif\",\n        textAlign: \"center\",\n        position: \"relative\",\n        width: 250,\n        height: 300\n    },\n    overlay: {\n        position: \"absolute\",\n        top: 0,\n        right: margin.right,\n        bottom: 0,\n        left: margin.left,\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        fontSize: 30,\n        color: \"#FFFFFF\",\n        // background: \"#FFFFFF33\",\n        textAlign: \"center\",\n        // This is important to preserve the chart interactivity\n        pointerEvents: \"none\"\n    },\n    totalLabel: {\n        fontSize: 24\n    }\n};\n\nfunction getPieCharts(schoolDataArray) {\n    const dataLength = schoolDataArray.length;\n    let pieCharts = [];\n\n    schoolDataArray.forEach((row, index) => {\n        const schoolName = row.schoolName;\n        const schoolData = row.dataArray;\n        const schoolYear = row.schoolYear;\n        console.log(\"school year: \" + schoolYear);\n\n        pieCharts.push(\n            <div key={schoolName} style={styles.root}>\n                <div style={{ height: \"90%\", flexGrow: \"1\" }}>\n                    <ResponsivePie\n                        key={schoolName}\n                        colors={d => d.color}\n                        isInteractive={true}\n                        data={schoolData}\n                        sortByValue={true}\n                        enableSlicesLabels={false}\n                        enableRadialLabels={false}\n                        margin={{ top: 40, right: 60, bottom: 40, left: 40 }}\n                        innerRadius={0.5}\n                        tooltip={data => {\n                            return getTooltipHTML(data);\n                        }}\n                        legends={\n                            index + 1 === dataLength\n                                ? [\n                                      {\n                                          anchor: \"top-right\",\n                                          direction: \"column\",\n                                          itemWidth: 20,\n                                          itemHeight: 20,\n                                          translateY: 20,\n                                          translateX: 20\n                                          // symbolSize: 18,\n                                          // symbolShape: \"circle\"\n                                      }\n                                  ]\n                                : undefined\n                        }\n                    />\n                    {/* <div style={styles.overlay}>\n                        <span>{schoolYear}</span>\n                    </div> */}\n                </div>\n                <div style={{ flexGrow: \"1\" }}>{schoolName}</div>\n            </div>\n        );\n    });\n\n    if (pieCharts && pieCharts.length > 0) {\n        const heading = [];\n        heading.push(<h3 key={\"gender-heading\"}>Gender</h3>);\n        pieCharts = heading.concat(pieCharts);\n    }\n\n    return pieCharts;\n}\n\nfunction getTooltipHTML(data) {\n    return (\n        <div\n            style={{ display: \"flex\", flexDirection: \"column\", color: \"black\" }}\n        >\n            <div>\n                {data.label}: {data.value}\n            </div>\n            <div>Percentage: {data.percentage}%</div>\n        </div>\n    );\n}\n\nexport default GenderChart;\n","import React from \"react\";\nimport { ResponsivePie } from \"@nivo/pie\";\n// import { EntityType, EthnicityAcronymList } from \"../../Constants\";\n\n/**\n * Main class component\n * @param {*} props\n */\nfunction EthnicityChart(props) {\n    const chartData = getGroupedEthnicData(\n        props.schoolData,\n        props.options,\n        ethnicityAcronyms\n    );\n    const pieCharts = createPieCharts(chartData);\n    return (\n        <div\n            style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                height: \"50%\",\n                width: \"100%\"\n            }}\n        >\n            {pieCharts}\n        </div>\n    );\n}\n\n//\n// Helper Functions\n//\n\n/**\n * return array->[schoolName, array[schoolData]]\n * ignoring zero values\n */\nfunction getGroupedEthnicData(allData, options, ethnicityAcronymList) {\n    let chartData = [];\n    options.forEach(schoolName => {\n        const schoolObj = allData[schoolName];\n\n        let thisSchoolData = {};\n        let schoolDataArray = [];\n        // ethnicityAcronymList.forEach(ethnicityObj => {\n        //     schoolDataArray.push({\n        //         id: ethnicityObj.id,\n        //         value: parseInt(schoolObj[ethnicityObj.id]),\n        //         label: ethnicityObj.desc,\n        //         chartColor: ethnicityObj.chartColor\n        //     });\n        // });\n\n        schoolDataArray = schoolObj._ethnicity;\n\n        // get percentage calculation out of total students that we consider\n        let totalStudents = 0;\n        schoolDataArray.forEach(element => (totalStudents += element.value));\n        schoolDataArray.forEach(\n            element =>\n                (element.percentage = (\n                    (element.value / totalStudents) *\n                    100\n                ).toFixed(2))\n        );\n\n        thisSchoolData.schoolName = schoolName;\n        thisSchoolData.dataArray = schoolDataArray;\n        chartData.push(thisSchoolData);\n    });\n\n    return chartData;\n}\n\nconst pieChartParentDivStyle = {\n    height: \"300px\",\n    width: \"25%\",\n    minWidth: \"250px\",\n    flexGrow: \"1\",\n    display: \"flex\",\n    flexDirection: \"column\"\n};\n\nconst styles = {\n    root: {\n        fontFamily: \"consolas, sans-serif\",\n        textAlign: \"center\",\n        position: \"relative\",\n        width: 250,\n        height: 300\n    },\n\n    totalLabel: {\n        fontSize: 24\n    }\n};\n\nfunction createPieCharts(chartData) {\n    let pieCharts = [];\n    const dataLength = chartData.length;\n    chartData.forEach((row, index) => {\n        pieCharts.push(\n            <div key={row.schoolName} style={styles.root}>\n                <div style={{ height: \"90%\", flexGrow: \"1\" }}>\n                    <ResponsivePie\n                        key={row.schoolName}\n                        data={row.dataArray}\n                        margin={{ top: 40, right: 60, bottom: 40, left: 40 }}\n                        colors={d => d.chartColor}\n                        sortByValue={true}\n                        enableRadialLabels={false}\n                        enableSlicesLabels={false}\n                        innerRadius={0.5}\n                        tooltip={data => {\n                            return getTooltipHTML(data);\n                        }}\n                        legends={\n                            index + 1 === dataLength\n                                ? [\n                                      {\n                                          anchor: \"top-right\",\n                                          direction: \"column\",\n                                          itemWidth: 20,\n                                          itemHeight: 20,\n                                          translateY: 20,\n                                          translateX: 30\n                                          // symbolSize: 18,\n                                          // symbolShape: \"circle\"\n                                      }\n                                  ]\n                                : undefined\n                        }\n                    />\n                </div>\n                <div style={{ flexGrow: \"1\" }}>{row.schoolName}</div>\n            </div>\n        );\n    });\n\n    if (pieCharts && pieCharts.length > 0) {\n        const heading = [];\n        heading.push(<h3 key=\"ethnicityHeading\">Ethnicity</h3>);\n        pieCharts = heading.concat(pieCharts);\n    }\n\n    return pieCharts;\n}\n\nexport default EthnicityChart;\n\nconst ethnicityAcronyms = [\n    {\n        id: \"AA\",\n        desc: \"African American\",\n        chartColor: \"#f6d18a\"\n    },\n    {\n        id: \"AS\",\n        desc: \"Asian\",\n        chartColor: \"blue\"\n    },\n    {\n        id: \"HI\",\n        desc: \"Hispanic\",\n        chartColor: \"green\"\n    },\n    {\n        id: \"MR\",\n        desc: \"Multiracial\",\n        chartColor: \"yellow\"\n    },\n    {\n        id: \"NA\",\n        desc: \"NA\",\n        chartColor: \"pink\"\n    },\n    {\n        id: \"NH_PI\",\n        desc: \"Native Hawaiian and Pacific Islander\",\n        chartColor: \"red\"\n    },\n    {\n        id: \"WH\",\n        desc: \"White\",\n        chartColor: \"brown\"\n    }\n];\n\nfunction getTooltipHTML(data) {\n    return (\n        <div\n            id={data.id}\n            style={{ display: \"flex\", flexDirection: \"column\", color: \"black\" }}\n        >\n            <div>\n                {data.desc}: {data.value}\n            </div>\n            <div>Percentage: {data.percentage}%</div>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { ResponsivePie } from \"@nivo/pie\";\n// import School from \"../../School\";\n\n/**\n * Main class component\n * @param {*} props\n */\nfunction EconDisChart(props) {\n    const schoolDataArray = getEconDisForSchool(\n        props.schoolData,\n        props.options\n    );\n\n    let pieCharts = getPieCharts(schoolDataArray);\n\n    return (\n        <div\n            style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                height: \"50%\",\n                width: \"100%\"\n            }}\n        >\n            {pieCharts}\n        </div>\n    );\n}\n\n/**\n * return array: x->schoolName, male, female\n */\nfunction getEconDisForSchool(allData, options) {\n    let chartData = [];\n    options.forEach(schoolName => {\n        const schoolObject = allData[schoolName];\n\n        const disadvantagedCount = schoolObject._economicallyDisadvantaged;\n        const totalCount = schoolObject._enrolled;\n        const nonDisadvantagedCount = totalCount - disadvantagedCount;\n\n        const disadvantagedPercentage = (\n            (disadvantagedCount / totalCount) *\n            100\n        ).toFixed(2);\n        const nonDisadvantagedPercentage = (\n            (nonDisadvantagedCount / totalCount) *\n            100\n        ).toFixed(2);\n\n        let thisSchoolData = {};\n        let schoolDataArray = [\n            {\n                id: \"Disadvantaged\",\n                value: disadvantagedCount,\n                percentage: disadvantagedPercentage,\n                color: \"orange\",\n                label: \"Economically Disadvantaged\"\n            },\n            {\n                id: \"Others\",\n                value: nonDisadvantagedCount,\n                percentage: nonDisadvantagedPercentage,\n                color: \"blue\",\n                label: \"Others\"\n            }\n        ];\n        thisSchoolData.schoolName = schoolName;\n        thisSchoolData.dataArray = schoolDataArray;\n        chartData.push(thisSchoolData);\n    });\n\n    // console.log(\"econ dis chart\");\n    // console.log(chartData);\n    return chartData;\n}\n\nconst pieChartParentDivStyle = {\n    height: \"300px\",\n    width: \"25%\",\n    minWidth: \"250px\",\n    flexGrow: \"1\",\n    display: \"flex\",\n    flexDirection: \"column\"\n};\n\nconst styles = {\n    root: {\n        fontFamily: \"consolas, sans-serif\",\n        textAlign: \"center\",\n        position: \"relative\",\n        width: 250,\n        height: 300\n    },\n\n    totalLabel: {\n        fontSize: 24\n    }\n};\n\nfunction getPieCharts(schoolDataArray) {\n    const dataLength = schoolDataArray.length;\n    let pieCharts = [];\n\n    schoolDataArray.forEach((row, index) => {\n        const schoolName = row.schoolName;\n        const schoolData = row.dataArray;\n        pieCharts.push(\n            <div key={schoolName} style={styles.root}>\n                <div style={{ height: \"90%\", flexGrow: \"1\" }}>\n                    <ResponsivePie\n                        key={schoolName}\n                        colors={d => d.color}\n                        isInteractive={true}\n                        data={schoolData}\n                        sortByValue={true}\n                        enableSlicesLabels={false}\n                        enableRadialLabels={false}\n                        margin={{ top: 40, right: 40, bottom: 60, left: 40 }}\n                        innerRadius={0.5}\n                        tooltip={data => {\n                            return getTooltipHTML(data);\n                        }}\n                        legends={\n                            index + 1 === dataLength\n                                ? [\n                                      {\n                                          anchor: \"bottom\",\n                                          direction: \"row\",\n                                          itemWidth: 120,\n                                          itemHeight: 20,\n                                          translateY: 30,\n                                          translateX: 10\n                                      }\n                                  ]\n                                : undefined\n                        }\n                    />\n                </div>\n                <div style={{ flexGrow: \"1\" }}>{schoolName}</div>\n            </div>\n        );\n    });\n\n    if (pieCharts && pieCharts.length > 0) {\n        const heading = [];\n        heading.push(\n            // <h3 key={\"econdis-heading\"}>Economically Disadvantaged</h3>\n            <h3 key={\"econdis-heading\"}>EconDis</h3>\n        );\n        pieCharts = heading.concat(pieCharts);\n    }\n\n    return pieCharts;\n}\n\nfunction getTooltipHTML(data) {\n    return (\n        <div\n            style={{ display: \"flex\", flexDirection: \"column\", color: \"black\" }}\n        >\n            <div>\n                {data.label}: {data.value}\n            </div>\n            <div>Percentage: {data.percentage}%</div>\n        </div>\n    );\n}\n\nexport default EconDisChart;\n","import React from \"react\";\nimport { ResponsivePie } from \"@nivo/pie\";\n// import School from \"../../School\";\n\n/**\n * Main class component\n * @param {*} props\n */\nfunction DisabilityChart(props) {\n    const schoolDataArray = getDisabilityData(props.schoolData, props.options);\n\n    let pieCharts = getPieCharts(schoolDataArray);\n\n    return (\n        <div\n            style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                height: \"50%\",\n                width: \"100%\"\n            }}\n        >\n            {pieCharts}\n        </div>\n    );\n}\n\n/**\n * return array: x->schoolName, male, female\n */\nfunction getDisabilityData(allData, options) {\n    let chartData = [];\n    options.forEach(schoolName => {\n        const schoolObject = allData[schoolName];\n\n        const disabilityCount = schoolObject._studentsWithDisability;\n        const totalCount = schoolObject._enrolled;\n        const nonDisabilityCount = totalCount - disabilityCount;\n\n        const disabilityPercentage = (\n            (disabilityCount / totalCount) *\n            100\n        ).toFixed(2);\n        const nonDisabilityPercentage = (\n            (nonDisabilityCount / totalCount) *\n            100\n        ).toFixed(2);\n\n        let thisSchoolData = {};\n        let schoolDataArray = [\n            {\n                // id: \"Students With Disability\",\n                id: \"SWD\",\n                value: disabilityCount,\n                percentage: disabilityPercentage,\n                color: \"orange\",\n                label: \"Students With Disability\"\n                // Students With Disability\n            },\n            {\n                id: \"Others\",\n                value: nonDisabilityCount,\n                percentage: nonDisabilityPercentage,\n                color: \"blue\",\n                label: \"Others\"\n            }\n        ];\n        thisSchoolData.schoolName = schoolName;\n        thisSchoolData.dataArray = schoolDataArray;\n        chartData.push(thisSchoolData);\n    });\n\n    // console.log(\"disability chart\");\n    // console.log(chartData);\n    return chartData;\n}\n\nconst pieChartParentDivStyle = {\n    height: \"300px\",\n    width: \"25%\",\n    minWidth: \"250px\",\n    flexGrow: \"1\",\n    display: \"flex\",\n    flexDirection: \"column\"\n};\n\nconst styles = {\n    root: {\n        fontFamily: \"consolas, sans-serif\",\n        textAlign: \"center\",\n        position: \"relative\",\n        width: 250,\n        height: 300\n    },\n\n    totalLabel: {\n        fontSize: 24\n    }\n};\n\nfunction getPieCharts(schoolDataArray) {\n    const dataLength = schoolDataArray.length;\n    let pieCharts = [];\n\n    schoolDataArray.forEach((row, index) => {\n        const schoolName = row.schoolName;\n        const schoolData = row.dataArray;\n        pieCharts.push(\n            <div key={schoolName} style={styles.root}>\n                <div style={{ height: \"90%\", flexGrow: \"1\" }}>\n                    <ResponsivePie\n                        key={schoolName}\n                        colors={d => d.color}\n                        isInteractive={true}\n                        data={schoolData}\n                        sortByValue={true}\n                        enableSlicesLabels={false}\n                        enableRadialLabels={false}\n                        innerRadius={0.5}\n                        margin={{ top: 40, right: 60, bottom: 40, left: 40 }}\n                        tooltip={data => {\n                            return getTooltipHTML(data);\n                        }}\n                        legends={\n                            index + 1 === dataLength\n                                ? [\n                                      {\n                                          anchor: \"top-right\",\n                                          direction: \"column\",\n                                          itemWidth: 20,\n                                          itemHeight: 20,\n                                          translateY: 20,\n                                          translateX: 20\n                                          // symbolSize: 18,\n                                          // symbolShape: \"circle\"\n                                      }\n                                  ]\n                                : undefined\n                        }\n                    />\n                </div>\n                <div style={{ flexGrow: \"1\" }}>{schoolName}</div>\n            </div>\n        );\n    });\n\n    if (pieCharts && pieCharts.length > 0) {\n        const heading = [];\n        heading.push(\n            <div key={\"disability-heading\"}>\n                {/* <h3>Students With Disability</h3> */}\n                <h3>Disability</h3>\n            </div>\n        );\n        pieCharts = heading.concat(pieCharts);\n    }\n\n    return pieCharts;\n}\n\nfunction getTooltipHTML(data) {\n    return (\n        <div\n            style={{ display: \"flex\", flexDirection: \"column\", color: \"black\" }}\n        >\n            <div>\n                {data.label}: {data.value}\n            </div>\n            <div>Percentage: {data.percentage}%</div>\n        </div>\n    );\n}\n\nexport default DisabilityChart;\n","/**\n * English Language Learners\n */\n\nimport React from \"react\";\nimport { ResponsivePie } from \"@nivo/pie\";\n\n/**\n * Main class component\n * @param {*} props\n */\nfunction ELLChart(props) {\n    const schoolDataArray = getLanguageLearnerData(\n        props.schoolData,\n        props.options\n    );\n\n    let pieCharts = getPieCharts(schoolDataArray);\n\n    return (\n        <div\n            style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                height: \"50%\",\n                width: \"100%\"\n            }}\n        >\n            {pieCharts}\n        </div>\n    );\n}\n\n/**\n * return array: x->schoolName, male, female\n */\nfunction getLanguageLearnerData(allData, options) {\n    let chartData = [];\n    options.forEach(schoolName => {\n        const schoolObject = allData[schoolName];\n\n        const languageLearnerCount = schoolObject._englishLanguageLearner;\n        const totalCount = schoolObject._enrolled;\n        const otherCount = totalCount - languageLearnerCount;\n\n        const learnerPercentage = (\n            (languageLearnerCount / totalCount) *\n            100\n        ).toFixed(2);\n        const otherPercentage = ((otherCount / totalCount) * 100).toFixed(2);\n\n        let thisSchoolData = {};\n        let schoolDataArray = [\n            {\n                // id: \"Students With Disability\",\n                id: \"ELL\",\n                value: languageLearnerCount,\n                percentage: learnerPercentage,\n                color: \"orange\",\n                label: \"English Language Learner\"\n            },\n            {\n                id: \"Others\",\n                value: otherCount,\n                percentage: otherPercentage,\n                color: \"blue\",\n                label: \"Others\"\n            }\n        ];\n        thisSchoolData.schoolName = schoolName;\n        thisSchoolData.dataArray = schoolDataArray;\n        chartData.push(thisSchoolData);\n    });\n\n    return chartData;\n}\n\nconst styles = {\n    root: {\n        fontFamily: \"consolas, sans-serif\",\n        textAlign: \"center\",\n        position: \"relative\",\n        width: 250,\n        height: 300\n    },\n\n    totalLabel: {\n        fontSize: 24\n    }\n};\n\nfunction getPieCharts(schoolDataArray) {\n    const dataLength = schoolDataArray.length;\n    let pieCharts = [];\n\n    schoolDataArray.forEach((row, index) => {\n        const schoolName = row.schoolName;\n        const schoolData = row.dataArray;\n        pieCharts.push(\n            <div key={schoolName} style={styles.root}>\n                <div style={{ height: \"90%\", flexGrow: \"1\" }}>\n                    <ResponsivePie\n                        key={schoolName}\n                        colors={d => d.color}\n                        isInteractive={true}\n                        data={schoolData}\n                        sortByValue={true}\n                        enableSlicesLabels={false}\n                        enableRadialLabels={false}\n                        innerRadius={0.5}\n                        margin={{ top: 40, right: 60, bottom: 40, left: 40 }}\n                        tooltip={data => {\n                            return getTooltipHTML(data);\n                        }}\n                        legends={\n                            index + 1 === dataLength\n                                ? [\n                                      {\n                                          anchor: \"bottom\",\n                                          direction: \"row\",\n                                          itemWidth: 120,\n                                          itemHeight: 20,\n                                          translateY: 30,\n                                          translateX: 10\n                                      }\n                                  ]\n                                : undefined\n                        }\n                    />\n                </div>\n                <div style={{ flexGrow: \"1\" }}>{schoolName}</div>\n            </div>\n        );\n    });\n\n    if (pieCharts && pieCharts.length > 0) {\n        const heading = [];\n        heading.push(\n            <div key={\"ell-heading\"}>\n                {/* <h3>English Language Learners</h3> */}\n                <h3>Learners</h3>\n            </div>\n        );\n        pieCharts = heading.concat(pieCharts);\n    }\n\n    return pieCharts;\n}\n\nfunction getTooltipHTML(data) {\n    return (\n        <div\n            style={{ display: \"flex\", flexDirection: \"column\", color: \"black\" }}\n        >\n            <div>\n                {data.label}: {data.value}\n            </div>\n            <div>Percentage: {data.percentage}%</div>\n        </div>\n    );\n}\n\nexport default ELLChart;\n","import React from \"react\";\n\nfunction NextStepsPanel() {\n    const styles = {\n        action: {\n            margin: \"10px\",\n            width: \"50%\",\n            borderStyle: \"ridge\",\n            borderWidth: \"2px\",\n            padding: \"10px\"\n        },\n        row: {\n            display: \"flex\",\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            margin: \"10px\",\n            width: \"70%\"\n        },\n\n        header: {\n            height: \"30%\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            display: \"flex\",\n            fontSize: \"xx-large\"\n        },\n        learn: {\n            height: \"30%\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            display: \"flex\",\n            fontSize: \"22px\",\n            width: \"100%\"\n        },\n        footer: {\n            display: \"flex\",\n            flexDirection: \"row-reverse\",\n            backgroundColor: \"#674063\",\n            height: \"10%\",\n            alignItems: \"center\",\n            fontSize: \"20px\"\n        }\n    };\n\n    return (\n        <div\n            className=\"App\"\n            style={{\n                display: \"flex\",\n                minHeight: \"90vh\",\n                flexDirection: \"column\",\n                backgroundColor: \"#d24242\",\n                width: \"100%\"\n            }}\n        >\n            <div style={styles.header}>\n                <h2 className=\"next-steps-panel\">Next Steps</h2>\n            </div>\n            <div\n                style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    alignItems: \"center\",\n                    fontSize: \"x-large\",\n                    height: \"30%\"\n                }}\n            >\n                <div style={styles.row}>\n                    <div style={styles.action}>\n                        Closing the Digital Equity Gap\n                    </div>\n                    <div style={styles.action}>The Digital Equity Walk</div>\n                </div>\n                <div style={styles.row}>\n                    <div style={styles.action}>The Walk in Action</div>\n                    <div style={styles.action}>Take the Virtual Walk</div>\n                </div>\n            </div>\n            <div style={styles.learn}>\n                <span style={{ width: \"60%\" }}>\n                    Want to learn more about the Digital Equity Walk or about\n                    opportunities to host a walk? Visit the Digital Equity Walk\n                    in Action or contact Jackney Prioly Joseph.\n                </span>\n            </div>\n            <div style={styles.footer}>\n                <span style={{ marginRight: \"20px\" }}>Contact Info</span>\n            </div>\n        </div>\n    );\n}\n\nexport default NextStepsPanel;\n","import { EntityType } from \"./Constants\";\n\nclass School {\n    constructor() {\n        this._male = 0;\n        this._female = 0;\n        this._ethnicity = [];\n        this._ethnicityMap = {};\n        this._districtName = \"\";\n        this._type = 0;\n        this._name = \"\";\n        this._economicallyDisadvantaged = 0;\n        this._enrolled = 0;\n        this._testTakers = 0;\n        this._studentsWithDisability = 0;\n        this._schoolYear = 2016;\n        this._englishLanguageLearner = 0;\n    }\n\n    setType(entityType) {\n        if (entityType === EntityType.SCHOOL || EntityType.DISTRICT) {\n            this._type = entityType;\n        } else {\n            this._type = EntityType.SCHOOL;\n            console.log(\"error setting entity\");\n        }\n    }\n\n    setMale(maleCount) {\n        // add error check\n        this._male = maleCount;\n    }\n\n    setFemale(femaleCount) {\n        // add error check\n        this._female = femaleCount;\n    }\n\n    setEthnicity(ethnicityObj) {\n        // add error check\n        this._ethnicity = ethnicityObj;\n    }\n\n    setEthnicityMap(ethnicityMap) {\n        // add error check\n        this._ethnicityMap = ethnicityMap;\n    }\n\n    setDistrictName(districtName) {\n        // add error check\n        this._districtName = districtName;\n    }\n\n    setName(name) {\n        this._name = name;\n    }\n\n    setEconomicallyDisadvantaged(count) {\n        this._economicallyDisadvantaged = count;\n    }\n\n    setEnrolled(count) {\n        this._enrolled = count;\n    }\n\n    setTestTakers(count) {\n        this._testTakers = count;\n    }\n\n    setStudentsWithDisability(count) {\n        this._studentsWithDisability = count;\n    }\n\n    setSchoolYear(year) {\n        this._schoolYear = year;\n    }\n\n    setEnglishLanguageLearner(count) {\n        this._englishLanguageLearner = count;\n    }\n}\n\nexport default School;\n","/*eslint-env es6*/\n// \"use strict\";\n\nimport React from \"react\";\nimport \"./App.css\";\nimport FilterPanel from \"./components/FilterPanel/FilterPanel\";\nimport GenderChart from \"./components/Charts/GenderChart\";\nimport EthnicityChart from \"./components/Charts/EthnicityChart\";\nimport EconDisChart from \"./components/Charts/EconDisChart\";\nimport DisabilityChart from \"./components/Charts/DisabilityChart\";\nimport ELLChart from \"./components/Charts/ELLChart\";\nimport NextStepsPanel from \"./components/NextStepsPanel\";\n// import GenderChart2 from \"./components/Charts/GenderChart2\";\n\nimport schoolData from \"./data/data-all\";\n\nimport {\n    EntityType,\n    EthnicityAcronymList,\n    EthnicityDefaultMap,\n    YearList\n} from \"./Constants\";\nimport School from \"./School\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.graphSelectionChangeHandler = this.graphSelectionChangeHandler.bind(\n            this\n        );\n\n        let selectedYears = {};\n        YearList.forEach(year => {\n            selectedYears[year] = false;\n        });\n        selectedYears[YearList[YearList.length - 1]] = true;\n        const selectedSchools = [\"Massachussets\"];\n\n        this.state = {\n            newSchoolData: this.transformSchoolData(\n                schoolData,\n                selectedSchools,\n                selectedYears\n            ),\n            schoolData: this.extractSchoolData(schoolData),\n            // filteredData: this.filterSchoolData(\n            //     this.extractSchoolData(schoolData)\n            // ),\n            schoolOptions: selectedSchools,\n            selectedFilters: {\n                gender: true,\n                ethnicity: false,\n                economicallyDisadvantaged: false,\n                disability: false,\n                englishLanguageLearner: false\n            },\n            selectedYears: selectedYears\n        };\n\n        console.log(\"schoolData\");\n        console.log(schoolData);\n    }\n\n    render() {\n        const charts = this.createChartsFromFilterState();\n\n        return (\n            <div\n                className=\"App\"\n                style={{ display: \"flex\", flexDirection: \"column\" }}\n            >\n                <div style={{ height: \"10%\" }}>\n                    <h3> Digital Equity </h3>\n                </div>\n                <div className=\"App\" style={{ display: \"flex\" }}>\n                    <div\n                        className=\"filter-panel\"\n                        style={{ backgroundColor: \"darkgreen\" }}\n                    >\n                        <FilterPanel\n                            data={this.state.schoolData}\n                            selectedFilters={this.state.selectedFilters}\n                            selectedYears={this.state.selectedYears}\n                            onSchoolFilterChange={(opts, actionMeta) =>\n                                this.schoolFilterChangeHandler(opts, actionMeta)\n                            }\n                            onGraphSelectionChange={\n                                this.graphSelectionChangeHandler\n                            }\n                        />\n                    </div>\n                    <div className=\"chart-panel\">{charts}</div>\n                </div>\n                <NextStepsPanel />\n            </div>\n        );\n    }\n\n    createChartsFromFilterState() {\n        const selectedFilters = this.state.selectedFilters;\n\n        let charts = [];\n        if (selectedFilters.gender === true) {\n            charts.push(\n                <GenderChart\n                    selectedSchoolOptions={this.state.schoolOptions}\n                    schoolData={this.state.schoolData}\n                    key=\"genderChart\"\n                />\n            );\n        }\n\n        if (selectedFilters.ethnicity === true) {\n            charts.push(\n                <EthnicityChart\n                    options={this.state.schoolOptions}\n                    schoolData={this.state.schoolData}\n                    key=\"ethnicityChart\"\n                />\n            );\n        }\n\n        if (selectedFilters.economicallyDisadvantaged === true) {\n            charts.push(\n                <EconDisChart\n                    options={this.state.schoolOptions}\n                    schoolData={this.state.schoolData}\n                    key=\"economicallyDisadvantagedChart\"\n                />\n            );\n        }\n\n        if (selectedFilters.disability === true) {\n            charts.push(\n                <DisabilityChart\n                    options={this.state.schoolOptions}\n                    schoolData={this.state.schoolData}\n                    key=\"disabilityChart\"\n                />\n            );\n        }\n\n        if (selectedFilters.englishLanguageLearner === true) {\n            charts.push(\n                <ELLChart\n                    options={this.state.schoolOptions}\n                    schoolData={this.state.schoolData}\n                    key=\"disabilityChart\"\n                />\n            );\n        }\n\n        return charts;\n    }\n\n    graphSelectionChangeHandler(newSelection) {\n        this.setState({\n            selectedFilters: newSelection\n        });\n    }\n\n    schoolFilterChangeHandler(selectedOptions, actionMeta) {\n        console.log(actionMeta);\n        if (!selectedOptions) {\n            selectedOptions = [];\n        }\n        this.setState({\n            schoolOptions: this.transformSelectedOptions(selectedOptions)\n        });\n    }\n\n    /**\n     *\n     * @param {array} schoolDataArray\n     */\n    transformSchoolData(schoolDataArray, selectedSchools, selectedYears) {\n        let validDataArray = [];\n        let schoolObjectArray = {};\n\n        //  TODO: do this by year\n\n        validDataArray = this.filterSchoolDataWithFields(schoolDataArray);\n        schoolObjectArray = this.getSchoolObjectArray(validDataArray);\n        let filteredDataArray = this.filterSchoolData(\n            schoolObjectArray,\n            selectedSchools,\n            selectedYears\n        );\n\n        // add info for all districts\n        const allYears = Object.keys(schoolObjectArray);\n        for (let year of allYears) {\n            const allSchoolNames = Object.keys(schoolObjectArray[year]);\n            let thisYearSchoolObjectMap = schoolObjectArray[year];\n\n            for (let schoolName of allSchoolNames) {\n                const schoolObject = thisYearSchoolObjectMap[schoolName];\n                const districtName = schoolObject._districtName;\n                const schoolYear = schoolObject._schoolYear;\n\n                let districtObject = thisYearSchoolObjectMap[districtName];\n                if (!districtObject) {\n                    districtObject = new School();\n                    districtObject.setName(districtName);\n                    districtObject.setType(EntityType.DISTRICT);\n                    districtObject.setEthnicityMap(EthnicityDefaultMap);\n                    districtObject.setSchoolYear(schoolYear);\n                } else {\n                    // console.log(districtName);\n                    // console.log(schoolName);\n                }\n                districtObject.setMale(\n                    districtObject._male + schoolObject._male\n                );\n                districtObject.setFemale(\n                    districtObject._female + schoolObject._female\n                );\n\n                districtObject.setEconomicallyDisadvantaged(\n                    districtObject._economicallyDisadvantaged +\n                        schoolObject._economicallyDisadvantaged\n                );\n\n                districtObject.setEnrolled(\n                    districtObject._enrolled + schoolObject._enrolled\n                );\n                districtObject.setStudentsWithDisability(\n                    districtObject._studentsWithDisability +\n                        schoolObject._studentsWithDisability\n                );\n\n                let thisDistrictEthnicityArray = [];\n                let thisDistrictEthnicityMap = districtObject._ethnicityMap;\n\n                for (let key in schoolObject._ethnicityMap) {\n                    const ethnicityObj = schoolObject._ethnicityMap[key];\n                    thisDistrictEthnicityMap[key].value += ethnicityObj.value;\n                    thisDistrictEthnicityArray.push(\n                        thisDistrictEthnicityMap[key]\n                    );\n                }\n\n                districtObject.setEthnicityMap(thisDistrictEthnicityMap);\n                districtObject.setEthnicity(thisDistrictEthnicityArray);\n\n                districtObject.setEnglishLanguageLearner(\n                    districtObject._englishLanguageLearner +\n                        schoolObject._englishLanguageLearner\n                );\n\n                thisYearSchoolObjectMap[districtName] = districtObject;\n            }\n            schoolObjectArray[year] = thisYearSchoolObjectMap;\n        }\n\n        console.log(\"yearSchoolObjectMap\");\n        console.log(schoolObjectArray);\n\n        return schoolObjectArray;\n    }\n\n    transformSelectedOptions(selectedOptions) {\n        let schoolNameArray = [];\n        selectedOptions.forEach(row => {\n            schoolNameArray.push(row.label);\n        });\n        return schoolNameArray;\n    }\n\n    extractSchoolData(schoolDataArray) {\n        let filteredArray = [];\n        let schoolObjectMap = {};\n\n        //  TODO: do this by year\n\n        filteredArray = this.filterSchoolDataWithFields(schoolDataArray);\n        schoolObjectMap = this.getSchoolObjectMap(filteredArray);\n\n        // add info for all districts\n        const allSchoolNames = Object.keys(schoolObjectMap);\n        for (let schoolName of allSchoolNames) {\n            const schoolObject = schoolObjectMap[schoolName];\n            const districtName = schoolObject._districtName;\n\n            let districtObject = schoolObjectMap[districtName];\n            if (!districtObject) {\n                districtObject = new School();\n                districtObject.setName(districtName);\n                districtObject.setType(EntityType.DISTRICT);\n                districtObject.setEthnicityMap(EthnicityDefaultMap);\n            } else {\n                // console.log(districtName);\n                // console.log(schoolName);\n            }\n            districtObject.setMale(districtObject._male + schoolObject._male);\n            districtObject.setFemale(\n                districtObject._female + schoolObject._female\n            );\n\n            districtObject.setEconomicallyDisadvantaged(\n                districtObject._economicallyDisadvantaged +\n                    schoolObject._economicallyDisadvantaged\n            );\n\n            districtObject.setEnrolled(\n                districtObject._enrolled + schoolObject._enrolled\n            );\n            districtObject.setStudentsWithDisability(\n                districtObject._studentsWithDisability +\n                    schoolObject._studentsWithDisability\n            );\n\n            let thisDistrictEthnicityArray = [];\n            let thisDistrictEthnicityMap = districtObject._ethnicityMap;\n\n            for (let key in schoolObject._ethnicityMap) {\n                const ethnicityObj = schoolObject._ethnicityMap[key];\n                thisDistrictEthnicityMap[key].value += ethnicityObj.value;\n                thisDistrictEthnicityArray.push(thisDistrictEthnicityMap[key]);\n            }\n\n            districtObject.setEthnicityMap(thisDistrictEthnicityMap);\n            districtObject.setEthnicity(thisDistrictEthnicityArray);\n\n            districtObject.setEnglishLanguageLearner(\n                districtObject._englishLanguageLearner +\n                    schoolObject._englishLanguageLearner\n            );\n\n            schoolObjectMap[districtName] = districtObject;\n        }\n\n        // console.log(\"schoolObjectMap\");\n        // console.log(schoolObjectMap);\n        return schoolObjectMap;\n    }\n\n    // only use schooldata that have the fields available\n    filterSchoolDataWithFields(schoolDataArray) {\n        let filteredArray = [];\n        let schoolsWithMissingEntry = [];\n        // filter out schools with all available data\n        schoolDataArray.forEach(schoolRow => {\n            if (\n                Number.isInteger(parseInt(schoolRow[\"FEMALE\"])) &&\n                Number.isInteger(parseInt(schoolRow[\"MALE\"])) &&\n                schoolRow[\"DIST_NAME\"] &&\n                Number.isInteger(parseInt(schoolRow[\"ECODIS\"])) &&\n                Number.isInteger(parseInt(schoolRow[\"SWD\"])) &&\n                Number.isInteger(parseInt(schoolRow[\"SY\"])) &&\n                Number.isInteger(parseInt(schoolRow[\"ELL\"]))\n            ) {\n                filteredArray.push(schoolRow);\n            } else {\n                schoolsWithMissingEntry.push(schoolRow);\n            }\n        });\n\n        if (schoolsWithMissingEntry.length > 0) {\n            console.log(\"missing entry for schools: \");\n            console.log(schoolsWithMissingEntry);\n        }\n\n        return filteredArray;\n    }\n\n    getSchoolObjectArray(filteredArray) {\n        let schoolObjectArray = [];\n\n        // add all school data\n        filteredArray.forEach(schoolRow => {\n            const schoolName = schoolRow[\"SCH_NAME\"];\n            const districtName = schoolRow[\"DIST_NAME\"];\n\n            let thisSchool = new School();\n            thisSchool.setName(schoolName);\n            thisSchool.setType(EntityType.SCHOOL);\n            thisSchool.setMale(parseInt(schoolRow[\"MALE\"]));\n            thisSchool.setFemale(parseInt(schoolRow[\"FEMALE\"]));\n            thisSchool.setDistrictName(districtName);\n            thisSchool.setEthnicity([]);\n            thisSchool.setEconomicallyDisadvantaged(\n                parseInt(schoolRow[\"ECODIS\"])\n            );\n            thisSchool.setEnrolled(parseInt(schoolRow[\"STUDENTS_ENROLLED\"]));\n            thisSchool.setStudentsWithDisability(parseInt(schoolRow[\"SWD\"]));\n            thisSchool.setSchoolYear(parseInt(schoolRow[\"SY\"]));\n            thisSchool.setEnglishLanguageLearner(parseInt(schoolRow[\"ELL\"]));\n\n            let thisSchoolEthnicityArray = [];\n            let thisSchoolEthnicityMap = {};\n\n            EthnicityAcronymList.forEach(ethnicityObj => {\n                let ethnicityArrayMember = {\n                    id: ethnicityObj.id,\n                    value: parseInt(schoolRow[ethnicityObj.id]),\n                    label: ethnicityObj.desc,\n                    desc: ethnicityObj.desc,\n                    chartColor: ethnicityObj.chartColor\n                };\n\n                thisSchoolEthnicityArray.push(ethnicityArrayMember);\n                thisSchoolEthnicityMap[\n                    ethnicityArrayMember.id\n                ] = ethnicityArrayMember;\n            });\n\n            thisSchool.setEthnicity(thisSchoolEthnicityArray);\n            thisSchool.setEthnicityMap(thisSchoolEthnicityMap);\n\n            schoolObjectArray.push(thisSchool);\n        });\n\n        return schoolObjectArray;\n    }\n\n    getSchoolObjectMap(filteredArray) {\n        let schoolObjectMap = {};\n\n        // add all school data\n        filteredArray.forEach(schoolRow => {\n            const schoolName = schoolRow[\"SCH_NAME\"];\n            const districtName = schoolRow[\"DIST_NAME\"];\n\n            let thisSchool = new School();\n            thisSchool.setName(schoolName);\n            thisSchool.setType(EntityType.SCHOOL);\n            thisSchool.setMale(parseInt(schoolRow[\"MALE\"]));\n            thisSchool.setFemale(parseInt(schoolRow[\"FEMALE\"]));\n            thisSchool.setDistrictName(districtName);\n            thisSchool.setEthnicity([]);\n            thisSchool.setEconomicallyDisadvantaged(\n                parseInt(schoolRow[\"ECODIS\"])\n            );\n            thisSchool.setEnrolled(parseInt(schoolRow[\"STUDENTS_ENROLLED\"]));\n            thisSchool.setStudentsWithDisability(parseInt(schoolRow[\"SWD\"]));\n            thisSchool.setSchoolYear(parseInt(schoolRow[\"SY\"]));\n            thisSchool.setEnglishLanguageLearner(parseInt(schoolRow[\"ELL\"]));\n\n            let thisSchoolEthnicityArray = [];\n            let thisSchoolEthnicityMap = {};\n\n            EthnicityAcronymList.forEach(ethnicityObj => {\n                let ethnicityArrayMember = {\n                    id: ethnicityObj.id,\n                    value: parseInt(schoolRow[ethnicityObj.id]),\n                    label: ethnicityObj.desc,\n                    desc: ethnicityObj.desc,\n                    chartColor: ethnicityObj.chartColor\n                };\n\n                thisSchoolEthnicityArray.push(ethnicityArrayMember);\n                thisSchoolEthnicityMap[\n                    ethnicityArrayMember.id\n                ] = ethnicityArrayMember;\n            });\n\n            thisSchool.setEthnicity(thisSchoolEthnicityArray);\n            thisSchool.setEthnicityMap(thisSchoolEthnicityMap);\n\n            schoolObjectMap[schoolName] = thisSchool;\n        });\n\n        return schoolObjectMap;\n    }\n\n    getYearSchoolObjectMapNew(filteredArray) {\n        let schoolObjectMap = {};\n        let yearSchoolObjectMap = {};\n\n        // add all school data\n        filteredArray.forEach(schoolRow => {\n            const schoolName = schoolRow[\"SCH_NAME\"];\n            const districtName = schoolRow[\"DIST_NAME\"];\n            const schoolYear = parseInt(schoolRow[\"SY\"]);\n\n            let thisSchool = new School();\n            thisSchool.setName(schoolName);\n            thisSchool.setType(EntityType.SCHOOL);\n            thisSchool.setMale(parseInt(schoolRow[\"MALE\"]));\n            thisSchool.setFemale(parseInt(schoolRow[\"FEMALE\"]));\n            thisSchool.setDistrictName(districtName);\n            thisSchool.setEthnicity([]);\n            thisSchool.setEconomicallyDisadvantaged(\n                parseInt(schoolRow[\"ECODIS\"])\n            );\n            thisSchool.setEnrolled(parseInt(schoolRow[\"STUDENTS_ENROLLED\"]));\n            thisSchool.setStudentsWithDisability(parseInt(schoolRow[\"SWD\"]));\n            thisSchool.setSchoolYear(schoolYear);\n            thisSchool.setEnglishLanguageLearner(parseInt(schoolRow[\"ELL\"]));\n\n            let thisSchoolEthnicityArray = [];\n            let thisSchoolEthnicityMap = {};\n\n            EthnicityAcronymList.forEach(ethnicityObj => {\n                let ethnicityArrayMember = {\n                    id: ethnicityObj.id,\n                    value: parseInt(schoolRow[ethnicityObj.id]),\n                    label: ethnicityObj.desc,\n                    desc: ethnicityObj.desc,\n                    chartColor: ethnicityObj.chartColor\n                };\n\n                thisSchoolEthnicityArray.push(ethnicityArrayMember);\n                thisSchoolEthnicityMap[\n                    ethnicityArrayMember.id\n                ] = ethnicityArrayMember;\n            });\n\n            thisSchool.setEthnicity(thisSchoolEthnicityArray);\n            thisSchool.setEthnicityMap(thisSchoolEthnicityMap);\n\n            schoolObjectMap[schoolName] = thisSchool;\n            let thisYearSchoolObjectMap = yearSchoolObjectMap[schoolYear];\n            if (!thisYearSchoolObjectMap) {\n                thisYearSchoolObjectMap = {};\n            }\n            thisYearSchoolObjectMap[schoolName] = thisSchool;\n            yearSchoolObjectMap[schoolYear] = thisYearSchoolObjectMap;\n        });\n\n        // return schoolObjectMap;\n\n        console.log(\"yearSchoolObjectMap\");\n        console.log(yearSchoolObjectMap);\n\n        return yearSchoolObjectMap;\n    }\n\n    filterSchoolData(schoolDataArray, selectedSchoolsArray, selectedYearsMap) {\n        const selectedSchoolsMap = {};\n        selectedSchoolsArray.forEach(\n            schoolName => (selectedSchoolsMap[schoolName] = true)\n        );\n\n        let filteredSchoolData = [];\n        schoolDataArray.forEach(schoolObject => {\n            if (\n                selectedSchoolsMap[schoolObject._name] &&\n                selectedYearsMap[schoolObject._schoolYear]\n            ) {\n                filteredSchoolData.push(schoolObject);\n            }\n        });\n\n        console.log(\"filteredSchoolData\");\n        console.log(filteredSchoolData);\n\n        return filteredSchoolData;\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}