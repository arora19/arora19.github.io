{"version":3,"sources":["Constants.js","components/Filters/SchoolDistrictFilter.js","components/Filters/PrimaryGraphsChoose.js","components/FilterPanel/FilterPanel.js","components/ChartPanel/GenderChart.js","components/ChartPanel/EthnicityChart.js","components/ChartPanel/EconDisChart.js","components/ChartPanel/DisabilityChart.js","components/NextStepsPanel.js","School.js","App.js","serviceWorker.js","index.js"],"names":["EntityType","SCHOOL","DISTRICT","EthnicityAcronymList","id","desc","chartColor","EthnicityDefaultMap","AA","value","AS","HI","MR","NA","NH_PI","WH","SchoolDistrictFilter","props","filteredSchools","data","schoolSet","schoolData","schools","Set","schoolName","schoolRow","_type","add","_name","getSchools","districtSet","getDistricts","schoolOptions","optionList","concat","label","createSchoolOptions","districtOptions","districtName","createDistrictOptions","allOptions","style","display","flexDirection","padding","color","options","defaultValue","filter","option","isMulti","onChange","selectedOptions","onOptionsChange","PrimaryGraphChoose","textAlign","type","optionChooseClicKHandler","checked","selectedFilters","gender","ethnicity","economicallyDisadvantaged","disability","targetId","target","newTargetVal","newState","onSelectionChange","FilterPanel","margin","className","onSchoolFilterChange","PrimaryGraphsChoose","newSelection","onGraphSelectionChange","pieChartParentDivStyle","height","width","minWidth","flexGrow","GenderChart","pieCharts","schoolDataArray","dataLength","length","forEach","row","index","dataArray","push","key","colors","d","isInteractive","sortByValue","enableSlicesLabels","enableRadialLabels","top","right","bottom","left","tooltip","percentage","getTooltipHTML","legends","anchor","direction","itemWidth","itemHeight","translateY","undefined","heading","getPieCharts","allData","chartData","maleCount","_male","femaleCount","_female","thisSchoolData","toFixed","getGenderForSchool","EthnicityChart","createPieCharts","ethnicityAcronymList","_ethnicity","totalStudents","element","getGroupedEthnicData","EconDisChart","schoolObject","disadvantagedCount","_economicallyDisadvantaged","totalCount","_enrolled","nonDisadvantagedCount","getEconDisForSchool","DisabilityChart","disabilityCount","_studentsWithDisability","nonDisabilityCount","getDisabilityData","NextStepsPanel","minHeight","alignItems","fontSize","School","this","_ethnicityMap","_districtName","_testTakers","entityType","console","log","ethnicityObj","ethnicityMap","name","count","App","graphSelectionChangeHandler","bind","state","transformSchoolData","newSchoolData","extractSchoolData","charts","createChartsFromFilterState","opts","schoolFilterChangeHandler","setState","transformSelectedOptions","schoolDataMap","schoolNameArray","filteredArray","schoolObjectMap","filterSchoolDataWithFields","getSchoolObjectMap","Object","keys","districtObject","setName","setType","setEthnicityMap","setMale","setFemale","setEconomicallyDisadvantaged","setEnrolled","setStudentsWithDisability","thisDistrictEthnicityArray","thisDistrictEthnicityMap","setEthnicity","schoolsWithMissingEntry","Number","isInteger","parseInt","thisSchool","setDistrictName","thisSchoolEthnicityArray","thisSchoolEthnicityMap","ethnicityArrayMember","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6c18bfb7.chunk.js","sourcesContent":["export const EntityType = {\n    SCHOOL: 0,\n    DISTRICT: 1\n};\n\nexport const EthnicityAcronymList = [\n    {\n        id: \"AA\",\n        desc: \"African American\",\n        chartColor: \"#f6d18a\"\n    },\n    {\n        id: \"AS\",\n        desc: \"Asian\",\n        chartColor: \"blue\"\n    },\n    {\n        id: \"HI\",\n        desc: \"Hispanic\",\n        chartColor: \"green\"\n    },\n    {\n        id: \"MR\",\n        desc: \"Multiracial\",\n        chartColor: \"yellow\"\n    },\n    {\n        id: \"NA\",\n        desc: \"NA\",\n        chartColor: \"pink\"\n    },\n    {\n        id: \"NH_PI\",\n        desc: \"Native Hawaiian and Pacific Islander\",\n        chartColor: \"red\"\n    },\n    {\n        id: \"WH\",\n        desc: \"White\",\n        chartColor: \"brown\"\n    }\n];\n\nexport const EthnicityDefaultMap = {\n    AA: {\n        id: \"AA\",\n        desc: \"African American\",\n        chartColor: \"#f6d18a\",\n        value: 0\n    },\n    AS: {\n        id: \"AS\",\n        desc: \"Asian\",\n        chartColor: \"blue\",\n        value: 0\n    },\n    HI: {\n        id: \"HI\",\n        desc: \"Hispanic\",\n        chartColor: \"green\",\n        value: 0\n    },\n    MR: {\n        id: \"MR\",\n        desc: \"Multiracial\",\n        chartColor: \"yellow\",\n        value: 0\n    },\n    NA: {\n        id: \"NA\",\n        desc: \"NA\",\n        chartColor: \"pink\",\n        value: 0\n    },\n    NH_PI: {\n        id: \"NH_PI\",\n        desc: \"Native Hawaiian and Pacific Islander\",\n        chartColor: \"red\",\n        value: 0\n    },\n    WH: {\n        id: \"WH\",\n        desc: \"White\",\n        chartColor: \"brown\",\n        value: 0\n    }\n};\n","import React from \"react\";\nimport Select from \"react-select\";\nimport { EntityType } from \"../../Constants\";\n\nfunction SchoolDistrictFilter(props) {\n    const filteredSchools = filterSchooldata(props.data);\n\n    const schoolSet = getSchools(filteredSchools);\n    const districtSet = getDistricts(filteredSchools);\n    const schoolOptions = createSchoolOptions(schoolSet);\n    const districtOptions = createDistrictOptions(districtSet);\n    const allOptions = schoolOptions.concat(districtOptions);\n\n    return (\n        <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n            <div style={{ padding: \"10px\" }}>\n                Select School / District to compare\n            </div>\n            <div style={{ color: \"black\" }}>\n                <Select\n                    options={allOptions}\n                    defaultValue={allOptions.filter(\n                        option => option.label === \"Massachussets\"\n                    )}\n                    isMulti\n                    onChange={selectedOptions =>\n                        props.onOptionsChange(selectedOptions)\n                    }\n                />\n            </div>\n        </div>\n    );\n}\n\nfunction filterSchooldata(schoolData) {\n    // let filteredArray = [];\n    // for (let schoolRow of schoolData) {\n    //     if (\n    //         parseInt(schoolRow[\"FEMALE\"]) &&\n    //         parseInt(schoolRow[\"MALE\"]) &&\n    //         schoolRow[\"DIST_NAME\"]\n    //     ) {\n    //         filteredArray = filteredArray.concat(schoolRow);\n    //     }\n    // }\n\n    // return filteredArray;\n    return schoolData;\n}\n\nfunction getSchools(schoolData) {\n    let schools = new Set();\n    for (let schoolName in schoolData) {\n        // if (parseInt(schoolRow[\"FEMALE\"]) && parseInt(schoolRow[\"MALE\"])){\n        //     schools.add(schoolRow[\"SCH_NAME\"]);\n        // }\n        const schoolRow = schoolData[schoolName];\n        if (schoolRow._type === EntityType.SCHOOL) {\n            schools.add(schoolRow._name);\n        }\n    }\n\n    return schools;\n}\n\nfunction createSchoolOptions(schoolSet) {\n    let optionList = [];\n    // let i = 0;\n    for (let schoolName of schoolSet) {\n        optionList = optionList.concat({\n            value: schoolName,\n            label: schoolName\n        });\n        // i++;\n    }\n    return optionList;\n}\n\nfunction getDistricts(schoolData) {\n    let districtSet = new Set();\n    for (let schoolName in schoolData) {\n        // if (schoolRow[\"DIST_NAME\"]) {\n        //     districtSet.add(schoolRow[\"DIST_NAME\"]);\n        // }\n        const schoolRow = schoolData[schoolName];\n        if (schoolRow._type === EntityType.DISTRICT) {\n            districtSet.add(schoolRow._name);\n        }\n    }\n\n    return districtSet;\n}\n\nfunction createDistrictOptions(districtSet) {\n    let optionList = [];\n    for (let districtName of districtSet) {\n        optionList = optionList.concat({\n            value: districtName,\n            label: districtName\n        });\n    }\n    return optionList;\n}\n\nexport default SchoolDistrictFilter;\n","import React from \"react\";\n\nfunction PrimaryGraphChoose(props) {\n    // console.log(props);\n\n    return (\n        <div\n            style={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                textAlign: \"left\"\n            }}\n        >\n            <div style={{ padding: \"10px\" }}>Select To View:</div>\n            <div>\n                <div>\n                    <input\n                        type=\"checkbox\"\n                        id=\"gender\"\n                        onChange={option =>\n                            optionChooseClicKHandler(props, option)\n                        }\n                        checked={props.selectedFilters.gender}\n                    />\n                    <label>Gender</label>\n                </div>\n                <div>\n                    <input\n                        type=\"checkbox\"\n                        id=\"ethnicity\"\n                        onChange={option =>\n                            optionChooseClicKHandler(props, option)\n                        }\n                        checked={props.selectedFilters.ethnicity}\n                    />\n                    <label>Ethnicity</label>\n                </div>\n\n                <div>\n                    <input\n                        type=\"checkbox\"\n                        id=\"economicallyDisadvantaged\"\n                        onChange={option =>\n                            optionChooseClicKHandler(props, option)\n                        }\n                        checked={\n                            props.selectedFilters.economicallyDisadvantaged\n                        }\n                    />\n                    <label>Economically Disadvantaged</label>\n                </div>\n\n                <div>\n                    <input\n                        type=\"checkbox\"\n                        id=\"disability\"\n                        onChange={option =>\n                            optionChooseClicKHandler(props, option)\n                        }\n                        checked={props.selectedFilters.disability}\n                    />\n                    <label>Students With Disability</label>\n                </div>\n\n                {/* <div>\n                    <input type=\"checkbox\" id=\"econ-disad\" />\n                    <label>Economically Disadvantaged</label>\n                </div>\n                <div>\n                    <input type=\"checkbox\" id=\"disabilities\" />\n                    <label>Disabilities</label>\n                </div>\n                <div>\n                    <input type=\"checkbox\" id=\"eng-lang-learner\" />\n                    <label>English Language Learner</label>\n                </div> */}\n            </div>\n        </div>\n    );\n}\n\nexport default PrimaryGraphChoose;\n\nfunction optionChooseClicKHandler(props, option) {\n    const targetId = option.target.id;\n    const newTargetVal = option.target.checked;\n    const oldState = props.selectedFilters;\n\n    let newState = oldState;\n    newState[targetId] = newTargetVal;\n    props.onSelectionChange(newState);\n}\n","import React from \"react\";\nimport SchoolDistrictFilter from \"../Filters/SchoolDistrictFilter\";\nimport PrimaryGraphsChoose from \"../Filters/PrimaryGraphsChoose\";\n\n// defaultSchoolOptions =\n\nfunction FilterPanel(props) {\n    // console.log('panel recieved school data' + props.data);\n\n    return (\n        <div>\n            <h3 style={{ margin: \"10px 0 10px 0\" }}>\n                Select filters below to view a graph\n            </h3>\n            <div\n                className=\"filter-container\"\n                style={{ display: \"flex\", flexDirection: \"column\" }}\n            >\n                <div>\n                    <SchoolDistrictFilter\n                        data={props.data}\n                        onOptionsChange={selectedOptions =>\n                            props.onSchoolFilterChange(selectedOptions)\n                        }\n                    ></SchoolDistrictFilter>\n                </div>\n                <div>\n                    <PrimaryGraphsChoose\n                        selectedFilters={props.selectedFilters}\n                        onSelectionChange={newSelection =>\n                            props.onGraphSelectionChange(newSelection)\n                        }\n                    />\n                </div>\n                <div></div>\n            </div>\n        </div>\n    );\n}\n\nexport default FilterPanel;\n","import React from \"react\";\nimport { ResponsivePie } from \"@nivo/pie\";\n// import School from \"../../School\";\n\n/**\n * Main class component\n * @param {*} props\n */\nfunction GenderChart(props) {\n    const schoolDataArray = getGenderForSchool(props.schoolData, props.options);\n\n    let pieCharts = getPieCharts(schoolDataArray);\n\n    return (\n        <div\n            style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                height: \"50%\",\n                width: \"100%\"\n            }}\n        >\n            {pieCharts}\n        </div>\n    );\n}\n\n/**\n * return array: x->schoolName, male, female\n */\nfunction getGenderForSchool(allData, options) {\n    let chartData = [];\n    options.forEach(schoolName => {\n        const schoolRow = allData[schoolName];\n\n        const maleCount = schoolRow._male;\n        const femaleCount = schoolRow._female;\n        const malePercentage = (\n            (maleCount / (maleCount + femaleCount)) *\n            100\n        ).toFixed(2);\n        const femalePercentage = (\n            (femaleCount / (maleCount + femaleCount)) *\n            100\n        ).toFixed(2);\n\n        let thisSchoolData = {};\n        let schoolDataArray = [\n            {\n                id: \"male\",\n                value: maleCount,\n                percentage: malePercentage,\n                color: \"orange\",\n                label: \"Male\"\n            },\n            {\n                id: \"female\",\n                value: femaleCount,\n                percentage: femalePercentage,\n                color: \"blue\",\n                label: \"Female\"\n            }\n        ];\n        thisSchoolData.schoolName = schoolName;\n        thisSchoolData.dataArray = schoolDataArray;\n        chartData.push(thisSchoolData);\n    });\n\n    return chartData;\n}\n\nconst pieChartParentDivStyle = {\n    height: \"300px\",\n    width: \"25%\",\n    minWidth: \"250px\",\n    flexGrow: \"1\",\n    display: \"flex\",\n    flexDirection: \"column\"\n};\n\nfunction getPieCharts(schoolDataArray) {\n    const dataLength = schoolDataArray.length;\n    let pieCharts = [];\n\n    schoolDataArray.forEach((row, index) => {\n        const schoolName = row.schoolName;\n        const schoolData = row.dataArray;\n        pieCharts.push(\n            <div key={schoolName} style={pieChartParentDivStyle}>\n                <div style={{ height: \"90%\", flexGrow: \"1\" }}>\n                    <ResponsivePie\n                        key={schoolName}\n                        colors={d => d.color}\n                        isInteractive={true}\n                        data={schoolData}\n                        sortByValue={true}\n                        enableSlicesLabels={false}\n                        enableRadialLabels={false}\n                        margin={{ top: 40, right: 40, bottom: 40, left: 40 }}\n                        tooltip={data => {\n                            return getTooltipHTML(data);\n                        }}\n                        legends={\n                            index + 1 === dataLength\n                                ? [\n                                      {\n                                          anchor: \"top-right\",\n                                          direction: \"column\",\n                                          itemWidth: 20,\n                                          itemHeight: 20,\n                                          translateY: 20\n                                          // symbolSize: 18,\n                                          // symbolShape: \"circle\"\n                                      }\n                                  ]\n                                : undefined\n                        }\n                    />\n                </div>\n                <div style={{ flexGrow: \"1\" }}>{schoolName}</div>\n            </div>\n        );\n    });\n\n    if (pieCharts && pieCharts.length > 0) {\n        const heading = [];\n        heading.push(<h3 key={\"gender-heading\"}>Gender</h3>);\n        pieCharts = heading.concat(pieCharts);\n    }\n\n    return pieCharts;\n}\n\nfunction getTooltipHTML(data) {\n    return (\n        <div\n            style={{ display: \"flex\", flexDirection: \"column\", color: \"black\" }}\n        >\n            <div>\n                {data.label}: {data.value}\n            </div>\n            <div>Percentage: {data.percentage}%</div>\n        </div>\n    );\n}\n\nexport default GenderChart;\n","import React from \"react\";\nimport { ResponsivePie } from \"@nivo/pie\";\n// import { EntityType, EthnicityAcronymList } from \"../../Constants\";\n\n/**\n * Main class component\n * @param {*} props\n */\nfunction EthnicityChart(props) {\n    const chartData = getGroupedEthnicData(\n        props.schoolData,\n        props.options,\n        ethnicityAcronyms\n    );\n    const pieCharts = createPieCharts(chartData);\n    return (\n        <div\n            style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                height: \"50%\",\n                width: \"100%\"\n            }}\n        >\n            {pieCharts}\n        </div>\n    );\n}\n\n//\n// Helper Functions\n//\n\n/**\n * return array->[schoolName, array[schoolData]]\n * ignoring zero values\n */\nfunction getGroupedEthnicData(allData, options, ethnicityAcronymList) {\n    let chartData = [];\n    options.forEach(schoolName => {\n        const schoolObj = allData[schoolName];\n\n        let thisSchoolData = {};\n        let schoolDataArray = [];\n        // ethnicityAcronymList.forEach(ethnicityObj => {\n        //     schoolDataArray.push({\n        //         id: ethnicityObj.id,\n        //         value: parseInt(schoolObj[ethnicityObj.id]),\n        //         label: ethnicityObj.desc,\n        //         chartColor: ethnicityObj.chartColor\n        //     });\n        // });\n\n        schoolDataArray = schoolObj._ethnicity;\n\n        // get percentage calculation out of total students that we consider\n        let totalStudents = 0;\n        schoolDataArray.forEach(element => (totalStudents += element.value));\n        schoolDataArray.forEach(\n            element =>\n                (element.percentage = (\n                    (element.value / totalStudents) *\n                    100\n                ).toFixed(2))\n        );\n\n        thisSchoolData.schoolName = schoolName;\n        thisSchoolData.dataArray = schoolDataArray;\n        chartData.push(thisSchoolData);\n    });\n\n    return chartData;\n}\n\nconst pieChartParentDivStyle = {\n    height: \"300px\",\n    width: \"25%\",\n    minWidth: \"250px\",\n    flexGrow: \"1\",\n    display: \"flex\",\n    flexDirection: \"column\"\n};\n\nfunction createPieCharts(chartData) {\n    let pieCharts = [];\n    const dataLength = chartData.length;\n    chartData.forEach((row, index) => {\n        pieCharts.push(\n            <div key={row.schoolName} style={pieChartParentDivStyle}>\n                <div style={{ height: \"90%\", flexGrow: \"1\" }}>\n                    <ResponsivePie\n                        key={row.schoolName}\n                        data={row.dataArray}\n                        margin={{ top: 40, right: 40, bottom: 40, left: 40 }}\n                        colors={d => d.chartColor}\n                        sortByValue={true}\n                        enableRadialLabels={false}\n                        enableSlicesLabels={false}\n                        tooltip={data => {\n                            return getTooltipHTML(data);\n                        }}\n                        legends={\n                            index + 1 === dataLength\n                                ? [\n                                      {\n                                          anchor: \"top-right\",\n                                          direction: \"column\",\n                                          itemWidth: 20,\n                                          itemHeight: 20,\n                                          translateY: 20\n                                          // symbolSize: 18,\n                                          // symbolShape: \"circle\"\n                                      }\n                                  ]\n                                : undefined\n                        }\n                    />\n                </div>\n                <div style={{ flexGrow: \"1\" }}>{row.schoolName}</div>\n            </div>\n        );\n    });\n\n    if (pieCharts && pieCharts.length > 0) {\n        const heading = [];\n        heading.push(<h3 key=\"ethnicityHeading\">Ethnicity</h3>);\n        pieCharts = heading.concat(pieCharts);\n    }\n\n    return pieCharts;\n}\n\nexport default EthnicityChart;\n\nconst ethnicityAcronyms = [\n    {\n        id: \"AA\",\n        desc: \"African American\",\n        chartColor: \"#f6d18a\"\n    },\n    {\n        id: \"AS\",\n        desc: \"Asian\",\n        chartColor: \"blue\"\n    },\n    {\n        id: \"HI\",\n        desc: \"Hispanic\",\n        chartColor: \"green\"\n    },\n    {\n        id: \"MR\",\n        desc: \"Multiracial\",\n        chartColor: \"yellow\"\n    },\n    {\n        id: \"NA\",\n        desc: \"NA\",\n        chartColor: \"pink\"\n    },\n    {\n        id: \"NH_PI\",\n        desc: \"Native Hawaiian and Pacific Islander\",\n        chartColor: \"red\"\n    },\n    {\n        id: \"WH\",\n        desc: \"White\",\n        chartColor: \"brown\"\n    }\n];\n\nfunction getTooltipHTML(data) {\n    return (\n        <div\n            id={data.id}\n            style={{ display: \"flex\", flexDirection: \"column\", color: \"black\" }}\n        >\n            <div>\n                {data.desc}: {data.value}\n            </div>\n            <div>Percentage: {data.percentage}%</div>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { ResponsivePie } from \"@nivo/pie\";\n// import School from \"../../School\";\n\n/**\n * Main class component\n * @param {*} props\n */\nfunction EconDisChart(props) {\n    const schoolDataArray = getEconDisForSchool(\n        props.schoolData,\n        props.options\n    );\n\n    let pieCharts = getPieCharts(schoolDataArray);\n\n    return (\n        <div\n            style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                height: \"50%\",\n                width: \"100%\"\n            }}\n        >\n            {pieCharts}\n        </div>\n    );\n}\n\n/**\n * return array: x->schoolName, male, female\n */\nfunction getEconDisForSchool(allData, options) {\n    let chartData = [];\n    options.forEach(schoolName => {\n        const schoolObject = allData[schoolName];\n\n        const disadvantagedCount = schoolObject._economicallyDisadvantaged;\n        const totalCount = schoolObject._enrolled;\n        const nonDisadvantagedCount = totalCount - disadvantagedCount;\n\n        const disadvantagedPercentage = (\n            (disadvantagedCount / totalCount) *\n            100\n        ).toFixed(2);\n        const nonDisadvantagedPercentage = (\n            (nonDisadvantagedCount / totalCount) *\n            100\n        ).toFixed(2);\n\n        let thisSchoolData = {};\n        let schoolDataArray = [\n            {\n                id: \"economicallyDisadvantaged\",\n                value: disadvantagedCount,\n                percentage: disadvantagedPercentage,\n                color: \"orange\",\n                label: \"Economically Disadvantaged\"\n            },\n            {\n                id: \"Others\",\n                value: nonDisadvantagedCount,\n                percentage: nonDisadvantagedPercentage,\n                color: \"blue\",\n                label: \"Others\"\n            }\n        ];\n        thisSchoolData.schoolName = schoolName;\n        thisSchoolData.dataArray = schoolDataArray;\n        chartData.push(thisSchoolData);\n    });\n\n    // console.log(\"econ dis chart\");\n    // console.log(chartData);\n    return chartData;\n}\n\nconst pieChartParentDivStyle = {\n    height: \"300px\",\n    width: \"25%\",\n    minWidth: \"250px\",\n    flexGrow: \"1\",\n    display: \"flex\",\n    flexDirection: \"column\"\n};\n\nfunction getPieCharts(schoolDataArray) {\n    const dataLength = schoolDataArray.length;\n    let pieCharts = [];\n\n    schoolDataArray.forEach((row, index) => {\n        const schoolName = row.schoolName;\n        const schoolData = row.dataArray;\n        pieCharts.push(\n            <div key={schoolName} style={pieChartParentDivStyle}>\n                <div style={{ height: \"90%\", flexGrow: \"1\" }}>\n                    <ResponsivePie\n                        key={schoolName}\n                        colors={d => d.color}\n                        isInteractive={true}\n                        data={schoolData}\n                        sortByValue={true}\n                        enableSlicesLabels={false}\n                        enableRadialLabels={false}\n                        margin={{ top: 40, right: 40, bottom: 40, left: 40 }}\n                        tooltip={data => {\n                            return getTooltipHTML(data);\n                        }}\n                        legends={\n                            index + 1 === dataLength\n                                ? [\n                                      {\n                                          anchor: \"top-right\",\n                                          direction: \"column\",\n                                          itemWidth: 20,\n                                          itemHeight: 20,\n                                          translateY: 20\n                                          // symbolSize: 18,\n                                          // symbolShape: \"circle\"\n                                      }\n                                  ]\n                                : undefined\n                        }\n                    />\n                </div>\n                <div style={{ flexGrow: \"1\" }}>{schoolName}</div>\n            </div>\n        );\n    });\n\n    if (pieCharts && pieCharts.length > 0) {\n        const heading = [];\n        heading.push(\n            <h3 key={\"econdis-heading\"}>Economically Disadvantaged</h3>\n        );\n        pieCharts = heading.concat(pieCharts);\n    }\n\n    return pieCharts;\n}\n\nfunction getTooltipHTML(data) {\n    return (\n        <div\n            style={{ display: \"flex\", flexDirection: \"column\", color: \"black\" }}\n        >\n            <div>\n                {data.label}: {data.value}\n            </div>\n            <div>Percentage: {data.percentage}%</div>\n        </div>\n    );\n}\n\nexport default EconDisChart;\n","import React from \"react\";\nimport { ResponsivePie } from \"@nivo/pie\";\n// import School from \"../../School\";\n\n/**\n * Main class component\n * @param {*} props\n */\nfunction DisabilityChart(props) {\n    const schoolDataArray = getDisabilityData(props.schoolData, props.options);\n\n    let pieCharts = getPieCharts(schoolDataArray);\n\n    return (\n        <div\n            style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                height: \"50%\",\n                width: \"100%\"\n            }}\n        >\n            {pieCharts}\n        </div>\n    );\n}\n\n/**\n * return array: x->schoolName, male, female\n */\nfunction getDisabilityData(allData, options) {\n    let chartData = [];\n    options.forEach(schoolName => {\n        const schoolObject = allData[schoolName];\n\n        const disabilityCount = schoolObject._studentsWithDisability;\n        const totalCount = schoolObject._enrolled;\n        const nonDisabilityCount = totalCount - disabilityCount;\n\n        const disabilityPercentage = (\n            (disabilityCount / totalCount) *\n            100\n        ).toFixed(2);\n        const nonDisabilityPercentage = (\n            (nonDisabilityCount / totalCount) *\n            100\n        ).toFixed(2);\n\n        let thisSchoolData = {};\n        let schoolDataArray = [\n            {\n                id: \"studentsWithDisability\",\n                value: disabilityCount,\n                percentage: disabilityPercentage,\n                color: \"orange\",\n                label: \"SWD\"\n                // Students With Disability\n            },\n            {\n                id: \"Others\",\n                value: nonDisabilityCount,\n                percentage: nonDisabilityPercentage,\n                color: \"blue\",\n                label: \"Others\"\n            }\n        ];\n        thisSchoolData.schoolName = schoolName;\n        thisSchoolData.dataArray = schoolDataArray;\n        chartData.push(thisSchoolData);\n    });\n\n    // console.log(\"disability chart\");\n    // console.log(chartData);\n    return chartData;\n}\n\nconst pieChartParentDivStyle = {\n    height: \"300px\",\n    width: \"25%\",\n    minWidth: \"250px\",\n    flexGrow: \"1\",\n    display: \"flex\",\n    flexDirection: \"column\"\n};\n\nfunction getPieCharts(schoolDataArray) {\n    const dataLength = schoolDataArray.length;\n    let pieCharts = [];\n\n    schoolDataArray.forEach((row, index) => {\n        const schoolName = row.schoolName;\n        const schoolData = row.dataArray;\n        pieCharts.push(\n            <div key={schoolName} style={pieChartParentDivStyle}>\n                <div style={{ height: \"90%\", flexGrow: \"1\" }}>\n                    <ResponsivePie\n                        key={schoolName}\n                        colors={d => d.color}\n                        isInteractive={true}\n                        data={schoolData}\n                        sortByValue={true}\n                        enableSlicesLabels={false}\n                        enableRadialLabels={false}\n                        margin={{ top: 40, right: 40, bottom: 40, left: 40 }}\n                        tooltip={data => {\n                            return getTooltipHTML(data);\n                        }}\n                        legends={\n                            index + 1 === dataLength\n                                ? [\n                                      {\n                                          anchor: \"top-right\",\n                                          direction: \"column\",\n                                          itemWidth: 20,\n                                          itemHeight: 20,\n                                          translateY: 20\n                                          // symbolSize: 18,\n                                          // symbolShape: \"circle\"\n                                      }\n                                  ]\n                                : undefined\n                        }\n                    />\n                </div>\n                <div style={{ flexGrow: \"1\" }}>{schoolName}</div>\n            </div>\n        );\n    });\n\n    if (pieCharts && pieCharts.length > 0) {\n        const heading = [];\n        heading.push(\n            <div key={\"disability-heading\"}>\n                <h3>Students With Disability</h3>\n            </div>\n        );\n        pieCharts = heading.concat(pieCharts);\n    }\n\n    return pieCharts;\n}\n\nfunction getTooltipHTML(data) {\n    return (\n        <div\n            style={{ display: \"flex\", flexDirection: \"column\", color: \"black\" }}\n        >\n            <div>\n                {data.label}: {data.value}\n            </div>\n            <div>Percentage: {data.percentage}%</div>\n        </div>\n    );\n}\n\nexport default DisabilityChart;\n","import React from \"react\";\n\nfunction NextStepsPanel() {\n    return (\n        <div\n            className=\"App\"\n            style={{\n                display: \"flex\",\n                minHeight: \"90vh\",\n                flexDirection: \"column\"\n            }}\n        >\n            <div style={{ height: \"30%\" }}>\n                <h2 className=\"next-steps-panel\">NEXT Steps</h2>\n            </div>\n            <div\n                style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    alignItems: \"center\",\n                    fontSize: \"x-large\",\n                    height: \"30%\"\n                }}\n            >\n                <div\n                    style={{\n                        display: \"flex\",\n                        flexDirection: \"row\",\n                        alignItems: \"center\",\n                        margin: \"10px\"\n                    }}\n                >\n                    <div style={{ margin: \"10px\" }}>\n                        Closing the Digital Equity Gap\n                    </div>\n                    <div style={{ margin: \"10px\" }}>\n                        The Digital Equity Walk\n                    </div>\n                </div>\n                <div\n                    style={{\n                        display: \"flex\",\n                        flexDirection: \"row\",\n                        alignItems: \"center\",\n                        margin: \"10px\"\n                    }}\n                >\n                    <div style={{ margin: \"10px\" }}>The Walk in Action</div>\n                    <div style={{ margin: \"10px\" }}>Take the Virtual Walk</div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default NextStepsPanel;\n","import { EntityType } from \"./Constants\";\n\nclass School {\n    constructor() {\n        this._male = 0;\n        this._female = 0;\n        this._ethnicity = [];\n        this._ethnicityMap = {};\n        this._districtName = \"\";\n        this._type = 0;\n        this._name = \"\";\n        this._economicallyDisadvantaged = 0;\n        this._enrolled = 0;\n        this._testTakers = 0;\n        this._studentsWithDisability = 0;\n    }\n\n    setType(entityType) {\n        if (entityType === EntityType.SCHOOL || EntityType.DISTRICT) {\n            this._type = entityType;\n        } else {\n            this._type = EntityType.SCHOOL;\n            console.log(\"error setting entity\");\n        }\n    }\n\n    setMale(maleCount) {\n        // add error check\n        this._male = maleCount;\n    }\n\n    setFemale(femaleCount) {\n        // add error check\n        this._female = femaleCount;\n    }\n\n    setEthnicity(ethnicityObj) {\n        // add error check\n        this._ethnicity = ethnicityObj;\n    }\n\n    setEthnicityMap(ethnicityMap) {\n        // add error check\n        this._ethnicityMap = ethnicityMap;\n    }\n\n    setDistrictName(districtName) {\n        // add error check\n        this._districtName = districtName;\n    }\n\n    setName(name) {\n        this._name = name;\n    }\n\n    setEconomicallyDisadvantaged(count) {\n        this._economicallyDisadvantaged = count;\n    }\n\n    setEnrolled(count) {\n        this._enrolled = count;\n    }\n\n    setTestTakers(count) {\n        this._testTakers = count;\n    }\n\n    setStudentsWithDisability(count) {\n        this._studentsWithDisability = count;\n    }\n}\n\nexport default School;\n","/*eslint-env es6*/\n// \"use strict\";\n\nimport React from \"react\";\nimport \"./App.css\";\nimport FilterPanel from \"./components/FilterPanel/FilterPanel\";\nimport GenderChart from \"./components/ChartPanel/GenderChart\";\n// import GenderChart2 from \"./components/ChartPanel/GenderChart2\";\nimport EthnicityChart from \"./components/ChartPanel/EthnicityChart\";\nimport EconDisChart from \"./components/ChartPanel/EconDisChart\";\nimport DisabilityChart from \"./components/ChartPanel/DisabilityChart\";\nimport NextStepsPanel from \"./components/NextStepsPanel\";\n\nimport schoolData from \"./data/data-2016\";\n// import { log } from \"util\";\nimport {\n    EntityType,\n    EthnicityAcronymList,\n    EthnicityDefaultMap\n} from \"./Constants\";\nimport School from \"./School\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.graphSelectionChangeHandler = this.graphSelectionChangeHandler.bind(\n            this\n        );\n        this.state = {\n            schoolData: this.transformSchoolData(schoolData),\n            newSchoolData: this.extractSchoolData(schoolData),\n            schoolOptions: [\"Massachussets\"],\n            selectedFilters: {\n                gender: true,\n                ethnicity: true,\n                economicallyDisadvantaged: true,\n                disability: true\n            }\n        };\n    }\n\n    render() {\n        const charts = this.createChartsFromFilterState();\n\n        return (\n            <div\n                className=\"App\"\n                style={{ display: \"flex\", flexDirection: \"column\" }}\n            >\n                <div style={{ height: \"10%\" }}>\n                    <h3> Digital Equity </h3>\n                </div>\n                <div className=\"App\" style={{ display: \"flex\" }}>\n                    <div className=\"filter-panel\">\n                        <FilterPanel\n                            data={this.state.newSchoolData}\n                            selectedFilters={this.state.selectedFilters}\n                            onSchoolFilterChange={opts =>\n                                this.schoolFilterChangeHandler(opts)\n                            }\n                            onGraphSelectionChange={\n                                this.graphSelectionChangeHandler\n                            }\n                        ></FilterPanel>\n                    </div>\n                    <div className=\"chart-panel\">{charts}</div>\n                </div>\n                <NextStepsPanel />\n            </div>\n        );\n    }\n\n    createChartsFromFilterState() {\n        const selectedFilters = this.state.selectedFilters;\n\n        let charts = [];\n        if (selectedFilters.gender === true) {\n            charts.push(\n                <GenderChart\n                    options={this.state.schoolOptions}\n                    schoolData={this.state.newSchoolData}\n                    key=\"genderChart\"\n                />\n            );\n        }\n\n        if (selectedFilters.ethnicity === true) {\n            charts.push(\n                <EthnicityChart\n                    options={this.state.schoolOptions}\n                    schoolData={this.state.newSchoolData}\n                    key=\"ethnicityChart\"\n                />\n            );\n        }\n\n        if (selectedFilters.economicallyDisadvantaged === true) {\n            charts.push(\n                <EconDisChart\n                    options={this.state.schoolOptions}\n                    schoolData={this.state.newSchoolData}\n                    key=\"economicallyDisadvantagedChart\"\n                />\n            );\n        }\n\n        if (selectedFilters.disability === true) {\n            charts.push(\n                <DisabilityChart\n                    options={this.state.schoolOptions}\n                    schoolData={this.state.newSchoolData}\n                    key=\"disabilityChart\"\n                />\n            );\n        }\n\n        return charts;\n    }\n\n    graphSelectionChangeHandler(newSelection) {\n        this.setState({\n            selectedFilters: newSelection\n        });\n    }\n\n    schoolFilterChangeHandler(selectedOptions) {\n        if (!selectedOptions) {\n            selectedOptions = [];\n        }\n        this.setState({\n            schoolOptions: this.transformSelectedOptions(selectedOptions)\n        });\n    }\n\n    /**\n     *\n     * @param {array} schoolDataArray\n     * @returns {Object} SchoolName -> SchoolData\n     */\n    transformSchoolData(schoolDataArray) {\n        let schoolDataMap = {};\n        schoolDataArray.forEach(schoolRow => {\n            schoolDataMap[schoolRow[\"SCH_NAME\"]] = schoolRow;\n        });\n        return schoolDataMap;\n    }\n\n    transformSelectedOptions(selectedOptions) {\n        let schoolNameArray = [];\n        selectedOptions.forEach(row => {\n            schoolNameArray.push(row.label);\n        });\n        return schoolNameArray;\n    }\n\n    extractSchoolData(schoolDataArray) {\n        let filteredArray = [];\n        let schoolObjectMap = {};\n\n        filteredArray = this.filterSchoolDataWithFields(schoolDataArray);\n        schoolObjectMap = this.getSchoolObjectMap(filteredArray);\n\n        // add info for all districts\n        const allSchoolNames = Object.keys(schoolObjectMap);\n        for (let schoolName of allSchoolNames) {\n            const schoolObject = schoolObjectMap[schoolName];\n            const districtName = schoolObject._districtName;\n\n            let districtObject = schoolObjectMap[districtName];\n            if (!districtObject) {\n                districtObject = new School();\n                districtObject.setName(districtName);\n                districtObject.setType(EntityType.DISTRICT);\n                districtObject.setEthnicityMap(EthnicityDefaultMap);\n            } else {\n                // console.log(districtName);\n                // console.log(schoolName);\n            }\n            districtObject.setMale(districtObject._male + schoolObject._male);\n            districtObject.setFemale(\n                districtObject._female + schoolObject._female\n            );\n\n            districtObject.setEconomicallyDisadvantaged(\n                districtObject._economicallyDisadvantaged +\n                    schoolObject._economicallyDisadvantaged\n            );\n\n            districtObject.setEnrolled(\n                districtObject._enrolled + schoolObject._enrolled\n            );\n            districtObject.setStudentsWithDisability(\n                districtObject._studentsWithDisability +\n                    schoolObject._studentsWithDisability\n            );\n\n            let thisDistrictEthnicityArray = [];\n            let thisDistrictEthnicityMap = districtObject._ethnicityMap;\n\n            for (let key in schoolObject._ethnicityMap) {\n                const ethnicityObj = schoolObject._ethnicityMap[key];\n                thisDistrictEthnicityMap[key].value += ethnicityObj.value;\n                thisDistrictEthnicityArray.push(thisDistrictEthnicityMap[key]);\n            }\n\n            districtObject.setEthnicityMap(thisDistrictEthnicityMap);\n            districtObject.setEthnicity(thisDistrictEthnicityArray);\n\n            schoolObjectMap[districtName] = districtObject;\n        }\n\n        // console.log(\"schoolObjectMap\");\n        // console.log(schoolObjectMap);\n        return schoolObjectMap;\n    }\n\n    // only use schooldata that have the fields available\n    filterSchoolDataWithFields(schoolDataArray) {\n        let filteredArray = [];\n        let schoolsWithMissingEntry = [];\n        // filter out schools with all available data\n        schoolDataArray.forEach(schoolRow => {\n            if (\n                Number.isInteger(parseInt(schoolRow[\"FEMALE\"])) &&\n                Number.isInteger(parseInt(schoolRow[\"MALE\"])) &&\n                schoolRow[\"DIST_NAME\"] &&\n                Number.isInteger(parseInt(schoolRow[\"ECODIS\"])) &&\n                Number.isInteger(parseInt(schoolRow[\"SWD\"]))\n            ) {\n                filteredArray.push(schoolRow);\n            } else {\n                schoolsWithMissingEntry.push(schoolRow);\n            }\n        });\n\n        if (schoolsWithMissingEntry.length > 0) {\n            console.log(\"missing entry for schools: \");\n            console.log(schoolsWithMissingEntry);\n        }\n\n        return filteredArray;\n    }\n\n    getSchoolObjectMap(filteredArray) {\n        let schoolObjectMap = {};\n\n        // add all school data\n        filteredArray.forEach(schoolRow => {\n            const schoolName = schoolRow[\"SCH_NAME\"];\n            const districtName = schoolRow[\"DIST_NAME\"];\n\n            let thisSchool = new School();\n            thisSchool.setName(schoolName);\n            thisSchool.setType(EntityType.SCHOOL);\n            thisSchool.setMale(parseInt(schoolRow[\"MALE\"]));\n            thisSchool.setFemale(parseInt(schoolRow[\"FEMALE\"]));\n            thisSchool.setDistrictName(districtName);\n            thisSchool.setEthnicity([]);\n            thisSchool.setEconomicallyDisadvantaged(\n                parseInt(schoolRow[\"ECODIS\"])\n            );\n            thisSchool.setEnrolled(parseInt(schoolRow[\"STUDENTS_ENROLLED\"]));\n            thisSchool.setStudentsWithDisability(parseInt(schoolRow[\"SWD\"]));\n\n            let thisSchoolEthnicityArray = [];\n            let thisSchoolEthnicityMap = {};\n\n            EthnicityAcronymList.forEach(ethnicityObj => {\n                let ethnicityArrayMember = {\n                    id: ethnicityObj.id,\n                    value: parseInt(schoolRow[ethnicityObj.id]),\n                    label: ethnicityObj.desc,\n                    desc: ethnicityObj.desc,\n                    chartColor: ethnicityObj.chartColor\n                };\n\n                thisSchoolEthnicityArray.push(ethnicityArrayMember);\n                thisSchoolEthnicityMap[\n                    ethnicityArrayMember.id\n                ] = ethnicityArrayMember;\n            });\n\n            thisSchool.setEthnicity(thisSchoolEthnicityArray);\n            thisSchool.setEthnicityMap(thisSchoolEthnicityMap);\n\n            schoolObjectMap[schoolName] = thisSchool;\n        });\n\n        return schoolObjectMap;\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}