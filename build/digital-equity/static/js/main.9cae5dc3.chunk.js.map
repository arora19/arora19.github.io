{"version":3,"sources":["Constants.js","components/Filters/SchoolDistrictFilter.js","components/Filters/PrimaryGraphsChoose.js","components/Filters/YearFilter.js","components/FilterPanel/FilterPanel.js","components/Charts/GenderChart.js","components/Charts/EthnicityChart.js","components/Charts/EconDisChart.js","components/Charts/DisabilityChart.js","components/Charts/ELLChart.js","components/NextStepsPanel.js","School.js","App.js","serviceWorker.js","index.js"],"names":["EntityType","SCHOOL","DISTRICT","EthnicityAcronymList","id","desc","chartColor","EthnicityDefaultMap","AA","value","AS","HI","MR","NA","NH_PI","WH","YearList","Menu","props","optionSelectedLength","getValue","length","children","style","margin","SchoolDistrictFilter","filteredSchools","data","schoolSet","schoolData","schools","Set","schoolName","schoolRow","_type","add","_name","getSchools","districtSet","getDistricts","schoolOptions","optionList","concat","label","createSchoolOptions","districtOptions","districtName","createDistrictOptions","allOptions","display","flexDirection","padding","color","components","isValidNewOption","inputValue","selectValue","options","defaultValue","filter","option","isMulti","required","onChange","selectedOptions","actionMeta","onOptionsChange","styles","checkbox","marginTop","PrimaryGraphChoose","textAlign","type","optionChooseClicKHandler","checked","selectedFilters","gender","ethnicity","economicallyDisadvantaged","disability","englishLanguageLearner","targetId","target","newTargetVal","newState","onSelectionChange","YearFilter","yearList","checkboxDivList","forEach","year","push","key","selectedYears","onYearChange","getCheckBoxListForYears","FilterPanel","className","onSchoolFilterChange","newYearSelection","onYearSelectionChange","PrimaryGraphsChoose","newSelection","onGraphSelectionChange","root","fontFamily","position","width","height","overlay","top","right","bottom","left","alignItems","justifyContent","fontSize","pointerEvents","totalLabel","genderChartsParent","borderStyle","backgroundColor","yearChartsParent","GenderChart","yearToSchoolArrayDataMap","dataYears","Object","keys","allYearPieCharts","thisYearPieCharts","schoolDataArray","dataLength","pieCharts","row","index","dataArray","schoolYear","console","log","flexGrow","colors","d","isInteractive","sortByValue","enableSlicesLabels","enableRadialLabels","innerRadius","tooltip","percentage","getTooltipHTML","legends","anchor","direction","itemWidth","itemHeight","translateY","translateX","undefined","getPieCharts","schoolArrayForYear","chartData","_schoolYear","maleCount","_male","femaleCount","_female","thisSchoolData","toFixed","getGenderForSchool","categoryChartsParent","EthnicityChart","createPieCharts","schoolObj","_ethnicity","totalStudents","element","getGroupedEthnicData","EconDisChart","schoolObject","disadvantagedCount","_economicallyDisadvantaged","totalCount","_enrolled","nonDisadvantagedCount","getEconDisForSchool","DisabilityChart","disabilityCount","_studentsWithDisability","nonDisabilityCount","getDisabilityData","ELLChart","languageLearnerCount","_englishLanguageLearner","otherCount","getLanguageLearnerData","NextStepsPanel","action","borderWidth","header","learn","footer","minHeight","marginRight","School","this","_ethnicityMap","_districtName","_testTakers","entityType","ethnicityObj","ethnicityMap","name","count","App","graphSelectionChangeHandler","bind","yearSelectionChangeHandler","selectedYearsMap","selectedSchools","yearSchoolObjectMap","transformSchoolData","state","newSchoolData","extractSchoolData","filteredSchoolData","filterYearSchoolObjectMap","charts","createChartsFromFilterState","opts","schoolFilterChangeHandler","setState","selectedSchoolOptions","transformSelectedOptions","validDataArray","filterSchoolDataWithFields","getYearSchoolObjectMapNew","allSchoolNames","thisYearSchoolObjectMap","districtObject","setName","setType","setEthnicityMap","setSchoolYear","setMale","setFemale","setEconomicallyDisadvantaged","setEnrolled","setStudentsWithDisability","thisDistrictEthnicityArray","thisDistrictEthnicityMap","setEthnicity","setEnglishLanguageLearner","schoolNameArray","filteredArray","schoolObjectMap","getSchoolObjectMap","schoolsWithMissingEntry","Number","isInteger","parseInt","thisSchool","setDistrictName","thisSchoolEthnicityArray","thisSchoolEthnicityMap","ethnicityArrayMember","selectedSchoolsArray","filteredSchoolDataMap","selectedYearsArray","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9cae5dc3.chunk.js","sourcesContent":["export const EntityType = {\n    SCHOOL: 0,\n    DISTRICT: 1\n};\n\nexport const EthnicityAcronymList = [\n    {\n        id: \"AA\",\n        desc: \"African American\",\n        chartColor: \"#f6d18a\"\n    },\n    {\n        id: \"AS\",\n        desc: \"Asian\",\n        chartColor: \"blue\"\n    },\n    {\n        id: \"HI\",\n        desc: \"Hispanic\",\n        chartColor: \"green\"\n    },\n    {\n        id: \"MR\",\n        desc: \"Multiracial\",\n        chartColor: \"yellow\"\n    },\n    {\n        id: \"NA\",\n        desc: \"NA\",\n        chartColor: \"pink\"\n    },\n    {\n        id: \"NH_PI\",\n        desc: \"Native Hawaiian and Pacific Islander\",\n        chartColor: \"red\"\n    },\n    {\n        id: \"WH\",\n        desc: \"White\",\n        chartColor: \"brown\"\n    }\n];\n\nexport const EthnicityDefaultMap = {\n    AA: {\n        id: \"AA\",\n        desc: \"African American\",\n        chartColor: \"#f6d18a\",\n        value: 0\n    },\n    AS: {\n        id: \"AS\",\n        desc: \"Asian\",\n        chartColor: \"blue\",\n        value: 0\n    },\n    HI: {\n        id: \"HI\",\n        desc: \"Hispanic\",\n        chartColor: \"green\",\n        value: 0\n    },\n    MR: {\n        id: \"MR\",\n        desc: \"Multiracial\",\n        chartColor: \"yellow\",\n        value: 0\n    },\n    NA: {\n        id: \"NA\",\n        desc: \"NA\",\n        chartColor: \"pink\",\n        value: 0\n    },\n    NH_PI: {\n        id: \"NH_PI\",\n        desc: \"Native Hawaiian and Pacific Islander\",\n        chartColor: \"red\",\n        value: 0\n    },\n    WH: {\n        id: \"WH\",\n        desc: \"White\",\n        chartColor: \"brown\",\n        value: 0\n    }\n};\n\nexport const YearList = [2016, 2017, 2018];\n\nexport const CategoryChartPanelBackgroundColor =  \"#6f7348\";","import React from \"react\";\n// import Select from \"react-select\";\n\nimport Creatable from \"react-select/creatable\";\nimport { components } from \"react-select\";\n\nimport { EntityType } from \"../../Constants\";\n\nfunction SchoolDistrictFilter(props) {\n    const filteredSchools = filterSchooldata(props.data);\n\n    const schoolSet = getSchools(filteredSchools);\n    const districtSet = getDistricts(filteredSchools);\n    const schoolOptions = createSchoolOptions(schoolSet);\n    const districtOptions = createDistrictOptions(districtSet);\n    const allOptions = schoolOptions.concat(districtOptions);\n\n    const isValidNewOption = (inputValue, selectValue) =>\n        inputValue.length > 0 && selectValue.length < 5;\n\n    return (\n        <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n            <div style={{ padding: \"10px\" }}>\n                Select School / District to compare\n            </div>\n            <div style={{ color: \"black\" }}>\n                {/* <Select\n                    options={allOptions}\n                    defaultValue={allOptions.filter(\n                        option => option.label === \"Massachussets\"\n                    )}\n                    isMulti\n                    onChange={selectedOptions =>\n                        props.onOptionsChange(selectedOptions)\n                    }\n                /> */}\n\n                <Creatable\n                    components={{ Menu }}\n                    isValidNewOption={isValidNewOption}\n                    options={allOptions}\n                    defaultValue={allOptions.filter(\n                        option => option.label === \"Massachussets\"\n                    )}\n                    isMulti\n                    required\n                    onChange={(selectedOptions, actionMeta) =>\n                        props.onOptionsChange(selectedOptions, actionMeta)\n                    }\n                />\n            </div>\n        </div>\n    );\n}\n\nconst Menu = props => {\n    const optionSelectedLength = props.getValue().length || 0;\n    return (\n        <components.Menu {...props}>\n            {optionSelectedLength < 3 ? (\n                props.children\n            ) : (\n                <div style={{ margin: 15 }}>\n                    Cannot view more than 3 schools/districts\n                </div>\n            )}\n        </components.Menu>\n    );\n};\n\n// function App() {\n//     const isValidNewOption = (inputValue, selectValue) =>\n//         inputValue.length > 0 && selectValue.length < 5;\n//     return (\n//         <div className=\"App\">\n//             <Creatable\n//                 components={{ Menu }}\n//                 isMulti\n//                 isValidNewOption={isValidNewOption}\n//                 options={options}\n//             />\n//         </div>\n//     );\n// }\n\nfunction filterSchooldata(schoolData) {\n    return schoolData;\n}\n\nfunction getSchools(schoolData) {\n    let schools = new Set();\n    for (let schoolName in schoolData) {\n        const schoolRow = schoolData[schoolName];\n        if (schoolRow._type === EntityType.SCHOOL) {\n            schools.add(schoolRow._name);\n        }\n    }\n\n    return schools;\n}\n\nfunction createSchoolOptions(schoolSet) {\n    let optionList = [];\n    for (let schoolName of schoolSet) {\n        optionList = optionList.concat({\n            value: schoolName,\n            label: schoolName\n        });\n    }\n    return optionList;\n}\n\nfunction getDistricts(schoolData) {\n    let districtSet = new Set();\n    for (let schoolName in schoolData) {\n        const schoolRow = schoolData[schoolName];\n        if (schoolRow._type === EntityType.DISTRICT) {\n            districtSet.add(schoolRow._name);\n        }\n    }\n\n    return districtSet;\n}\n\nfunction createDistrictOptions(districtSet) {\n    let optionList = [];\n    for (let districtName of districtSet) {\n        optionList = optionList.concat({\n            value: districtName,\n            label: districtName\n        });\n    }\n    return optionList;\n}\n\nexport default SchoolDistrictFilter;\n","import React from \"react\";\n\nconst styles = {\n    checkbox: {\n        marginTop: \"5px\"\n    }\n};\n\nfunction PrimaryGraphChoose(props) {\n    // console.log(props);\n\n    return (\n        <div\n            style={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                textAlign: \"left\"\n            }}\n        >\n            <div style={{ padding: \"10px\" }}>Select To View:</div>\n            <div>\n                <div style={styles.checkbox}>\n                    <input\n                        type=\"checkbox\"\n                        id=\"gender\"\n                        onChange={option =>\n                            optionChooseClicKHandler(props, option)\n                        }\n                        checked={props.selectedFilters.gender}\n                    />\n                    <label>Gender</label>\n                </div>\n                <div style={styles.checkbox}>\n                    <input\n                        type=\"checkbox\"\n                        id=\"ethnicity\"\n                        onChange={option =>\n                            optionChooseClicKHandler(props, option)\n                        }\n                        checked={props.selectedFilters.ethnicity}\n                    />\n                    <label>Ethnicity</label>\n                </div>\n\n                <div style={styles.checkbox}>\n                    <input\n                        type=\"checkbox\"\n                        id=\"economicallyDisadvantaged\"\n                        onChange={option =>\n                            optionChooseClicKHandler(props, option)\n                        }\n                        checked={\n                            props.selectedFilters.economicallyDisadvantaged\n                        }\n                    />\n                    <label>Economically Disadvantaged</label>\n                </div>\n\n                <div style={styles.checkbox}>\n                    <input\n                        type=\"checkbox\"\n                        id=\"disability\"\n                        onChange={option =>\n                            optionChooseClicKHandler(props, option)\n                        }\n                        checked={props.selectedFilters.disability}\n                    />\n                    <label>Students With Disability</label>\n                </div>\n\n                <div style={styles.checkbox}>\n                    <input\n                        type=\"checkbox\"\n                        id=\"englishLanguageLearner\"\n                        onChange={option =>\n                            optionChooseClicKHandler(props, option)\n                        }\n                        checked={props.selectedFilters.englishLanguageLearner}\n                    />\n                    <label>English Language Learners</label>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default PrimaryGraphChoose;\n\nfunction optionChooseClicKHandler(props, option) {\n    const targetId = option.target.id;\n    const newTargetVal = option.target.checked;\n    const oldState = props.selectedFilters;\n\n    let newState = oldState;\n    newState[targetId] = newTargetVal;\n    props.onSelectionChange(newState);\n}\n","import React from \"react\";\nimport { YearList } from \"../../Constants\";\n\nconst styles = {\n    checkbox: {\n        marginTop: \"5px\"\n    }\n};\n\nfunction YearFilter(props) {\n    return (\n        <div\n            style={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                textAlign: \"left\"\n            }}\n        >\n            <div style={{ padding: \"10px\" }}>Select Years to view</div>\n            <div>{getCheckBoxListForYears(YearList, props)}</div>\n        </div>\n    );\n}\n\nfunction getCheckBoxListForYears(yearList, props) {\n    let checkboxDivList = [];\n\n    yearList.forEach(year => {\n        checkboxDivList.push(\n            <div style={styles.checkbox} key={\"year-\" + year}>\n                <input\n                    type=\"checkbox\"\n                    id={year}\n                    onChange={option =>\n                        optionChooseClicKHandler(props, option)\n                    }\n                    checked={props.selectedYears[year]}\n                />\n                <label>{year}</label>\n            </div>\n        );\n    });\n\n    return checkboxDivList;\n}\n\nexport default YearFilter;\n\n\nfunction optionChooseClicKHandler(props, option) {\n    const targetId = option.target.id;\n    const newTargetVal = option.target.checked;\n    const oldState = props.selectedYears;\n\n    let newState = oldState;\n    newState[targetId] = newTargetVal;\n    props.onYearChange(newState);\n}","import React from \"react\";\nimport SchoolDistrictFilter from \"../Filters/SchoolDistrictFilter\";\nimport PrimaryGraphsChoose from \"../Filters/PrimaryGraphsChoose\";\nimport YearFilter from \"../Filters/YearFilter\";\n\n// defaultSchoolOptions =\n\nfunction FilterPanel(props) {\n    // console.log('panel recieved school data' + props.data);\n\n    return (\n        <div>\n            <h3 style={{ margin: \"10px 0 10px 0\" }}>\n                Select filters below to view a graph\n            </h3>\n            <div\n                className=\"filter-container\"\n                style={{ display: \"flex\", flexDirection: \"column\" }}\n            >\n                <div>\n                    <SchoolDistrictFilter\n                        data={props.data}\n                        onOptionsChange={(selectedOptions, actionMeta) =>\n                            props.onSchoolFilterChange(\n                                selectedOptions,\n                                actionMeta\n                            )\n                        }\n                    />\n                </div>\n                <div>\n                    <YearFilter\n                        selectedYears={props.selectedYears}\n                        onYearChange = {newYearSelection =>\n                            props.onYearSelectionChange(newYearSelection)\n                        }\n                    />\n                </div>\n                <div>\n                    <PrimaryGraphsChoose\n                        selectedFilters={props.selectedFilters}\n                        onSelectionChange={newSelection =>\n                            props.onGraphSelectionChange(newSelection)\n                        }\n                    />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default FilterPanel;\n","import React from \"react\";\nimport { ResponsivePie } from \"@nivo/pie\";\n// import School from \"../../School\";\n\n/**\n * Main class component\n * @param {*} props\n */\nfunction GenderChart(props) {\n    // const schoolDataArray = getGenderForSchool(\n    //     props.schoolData,\n    //     props.selectedSchoolOptions\n    // );\n\n    const yearToSchoolArrayDataMap = props.yearToSchoolArrayDataMap;\n    const dataYears = Object.keys(yearToSchoolArrayDataMap);\n\n    let allYearPieCharts = [];\n\n    dataYears.forEach(year => {\n        const thisYearSchoolDataArray = getGenderForSchool(yearToSchoolArrayDataMap[year]);\n        let thisYearPieCharts = getPieCharts(thisYearSchoolDataArray);\n\n            allYearPieCharts.push(\n            <div key={year} style={styles.yearChartsParent}>\n                <span>{year}</span>\n                {thisYearPieCharts}\n            </div>\n        )\n    });\n\n\n    return (\n        <div id=\"gender-pie-charts\"\n            style={styles.genderChartsParent}\n        >\n            <h3 key={\"gender-heading\"}>Gender</h3>\n            {allYearPieCharts}\n        </div>\n    );\n}\n\n\nfunction getGenderForSchool(schoolArrayForYear) {\n    let chartData = [];\n\n        schoolArrayForYear.forEach(schoolRow => {\n            const schoolName = schoolRow._name;\n            const schoolYear = schoolRow._schoolYear;\n            const maleCount = schoolRow._male;\n            const femaleCount = schoolRow._female;\n            const malePercentage = (\n                (maleCount / (maleCount + femaleCount)) *\n                100\n            ).toFixed(2);\n            const femalePercentage = (\n                (femaleCount / (maleCount + femaleCount)) *\n                100\n            ).toFixed(2);\n\n            let thisSchoolData = {};\n            let schoolDataArray = [\n                {\n                    id: \"male\",\n                    value: maleCount,\n                    percentage: malePercentage,\n                    color: \"orange\",\n                    label: \"Male\"\n                },\n                {\n                    id: \"female\",\n                    value: femaleCount,\n                    percentage: femalePercentage,\n                    color: \"blue\",\n                    label: \"Female\"\n                }\n            ];\n            thisSchoolData.schoolName = schoolName;\n            thisSchoolData.dataArray = schoolDataArray;\n            thisSchoolData.schoolYear = schoolYear;\n            chartData.push(thisSchoolData);\n        });\n\n    return chartData;\n}\n\n\nconst margin = { top: 30, right: 200, bottom: 30, left: 30 };\n\nconst styles = {\n    root: {\n        fontFamily: \"consolas, sans-serif\",\n        textAlign: \"center\",\n        position: \"relative\",\n        width: 250,\n        height: 300\n    },\n    overlay: {\n        position: \"absolute\",\n        top: 0,\n        right: margin.right,\n        bottom: 0,\n        left: margin.left,\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        fontSize: 30,\n        color: \"#FFFFFF\",\n        // background: \"#FFFFFF33\",\n        textAlign: \"center\",\n        // This is important to preserve the chart interactivity\n        pointerEvents: \"none\"\n    },\n    totalLabel: {\n        fontSize: 24\n    },\n    genderChartsParent: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        // height: \"50%\",\n        width: \"100%\",borderStyle: \"ridge\",\n        padding: \"10px\",\n        backgroundColor: \"#4f4954\"\n\n    },\n    yearChartsParent: {\n        display: \"flex\",\n        flexDirection: \"row\"\n    }\n};\n\nfunction getPieCharts(schoolDataArray) {\n    const dataLength = schoolDataArray.length;\n    let pieCharts = [];\n\n    schoolDataArray.forEach((row, index) => {\n        const schoolName = row.schoolName;\n        const schoolData = row.dataArray;\n        const schoolYear = row.schoolYear;\n        console.log(\"school year: \" + schoolYear);\n\n        pieCharts.push(\n            <div key={schoolName} style={styles.root}>\n                <div style={{ height: \"90%\", flexGrow: \"1\" }}>\n                    <ResponsivePie\n                        key={schoolName}\n                        colors={d => d.color}\n                        isInteractive={true}\n                        data={schoolData}\n                        sortByValue={true}\n                        enableSlicesLabels={false}\n                        enableRadialLabels={false}\n                        margin={{ top: 40, right: 60, bottom: 40, left: 40 }}\n                        innerRadius={0.5}\n                        tooltip={data => {\n                            return getTooltipHTML(data);\n                        }}\n                        legends={\n                            index + 1 === dataLength\n                                ? [\n                                      {\n                                          anchor: \"top-right\",\n                                          direction: \"column\",\n                                          itemWidth: 20,\n                                          itemHeight: 20,\n                                          translateY: 20,\n                                          translateX: 20\n                                          // symbolSize: 18,\n                                          // symbolShape: \"circle\"\n                                      }\n                                  ]\n                                : undefined\n                        }\n                    />\n                    {/* <div style={styles.overlay}>\n                        <span>{schoolYear}</span>\n                    </div> */}\n                </div>\n                <div style={{ flexGrow: \"1\" }}>{schoolName}</div>\n            </div>\n        );\n    });\n\n    // if (pieCharts && pieCharts.length > 0) {\n    //     const heading = [];\n    //     heading.push(<h3 key={\"gender-heading\"}>Gender</h3>);\n    //     pieCharts = heading.concat(pieCharts);\n    // }\n\n    return pieCharts;\n}\n\nfunction getTooltipHTML(data) {\n    return (\n        <div\n            style={{ display: \"flex\", flexDirection: \"column\", color: \"black\" }}\n        >\n            <div>\n                {data.label}: {data.value}\n            </div>\n            <div>Percentage: {data.percentage}%</div>\n        </div>\n    );\n}\n\nexport default GenderChart;\n","import React from \"react\";\nimport { ResponsivePie } from \"@nivo/pie\";\n// import { EntityType, EthnicityAcronymList } from \"../../Constants\";\n\n/**\n * Main class component\n * @param {*} props\n */\nfunction EthnicityChart(props) {\n\n\n    const yearToSchoolArrayDataMap = props.yearToSchoolArrayDataMap;\n    const dataYears = Object.keys(yearToSchoolArrayDataMap);\n    let allYearPieCharts = [];\n\n    dataYears.forEach(year => {\n        const thisYearSchoolDataArray = getGroupedEthnicData(yearToSchoolArrayDataMap[year]);\n        let thisYearPieCharts = createPieCharts(thisYearSchoolDataArray);\n\n        allYearPieCharts.push(\n            <div key={year} style={styles.yearChartsParent}>\n                <span>{year}</span>\n                {thisYearPieCharts}\n            </div>\n        )\n    });\n\n    return (\n        <div id=\"ethnicity-pie-charts\"\n            style={styles.categoryChartsParent}\n        >\n            <h3 key=\"ethnicityHeading\">Ethnicity</h3>\n            {allYearPieCharts}\n        </div>\n    );\n}\n\n//\n// Helper Functions\n//\n\n/**\n * return array->[schoolName, array[schoolData]]\n * ignoring zero values\n */\nfunction getGroupedEthnicData(schoolArrayForYear) {\n    let chartData = [];\n    schoolArrayForYear.forEach(schoolObj => {\n        const schoolName = schoolObj._name;\n        let thisSchoolData = {};\n        let schoolDataArray = [];\n\n        schoolDataArray = schoolObj._ethnicity;\n\n        // get percentage calculation out of total students that we consider\n        let totalStudents = 0;\n        schoolDataArray.forEach(element => (totalStudents += element.value));\n        schoolDataArray.forEach(\n            element =>\n                (element.percentage = (\n                    (element.value / totalStudents) *\n                    100\n                ).toFixed(2))\n        );\n\n        thisSchoolData.schoolName = schoolName;\n        thisSchoolData.dataArray = schoolDataArray;\n        chartData.push(thisSchoolData);\n    });\n\n    return chartData;\n}\n\n// const pieChartParentDivStyle = {\n//     height: \"300px\",\n//     width: \"25%\",\n//     minWidth: \"250px\",\n//     flexGrow: \"1\",\n//     display: \"flex\",\n//     flexDirection: \"column\"\n// };\n\nconst styles = {\n    root: {\n        fontFamily: \"consolas, sans-serif\",\n        textAlign: \"center\",\n        position: \"relative\",\n        width: 250,\n        height: 300\n    },\n\n    totalLabel: {\n        fontSize: 24\n    },\n    categoryChartsParent: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        // height: \"50%\",\n        width: \"100%\",\n        borderStyle: \"ridge\",\n        padding: \"10px\",\n        backgroundColor: \"#6f7348\"\n    },\n    yearChartsParent: {\n        display: \"flex\",\n        flexDirection: \"row\"\n    }\n};\n\nfunction createPieCharts(chartData) {\n    let pieCharts = [];\n    const dataLength = chartData.length;\n    chartData.forEach((row, index) => {\n        pieCharts.push(\n            <div key={row.schoolName} style={styles.root}>\n                <div style={{ height: \"90%\", flexGrow: \"1\" }}>\n                    <ResponsivePie\n                        key={row.schoolName}\n                        data={row.dataArray}\n                        margin={{ top: 40, right: 60, bottom: 40, left: 40 }}\n                        colors={d => d.chartColor}\n                        sortByValue={true}\n                        enableRadialLabels={false}\n                        enableSlicesLabels={false}\n                        innerRadius={0.5}\n                        tooltip={data => {\n                            return getTooltipHTML(data);\n                        }}\n                        legends={\n                            index + 1 === dataLength\n                                ? [\n                                      {\n                                          anchor: \"top-right\",\n                                          direction: \"column\",\n                                          itemWidth: 20,\n                                          itemHeight: 20,\n                                          translateY: 20,\n                                          translateX: 30\n                                          // symbolSize: 18,\n                                          // symbolShape: \"circle\"\n                                      }\n                                  ]\n                                : undefined\n                        }\n                    />\n                </div>\n                <div style={{ flexGrow: \"1\" }}>{row.schoolName}</div>\n            </div>\n        );\n    });\n\n    // if (pieCharts && pieCharts.length > 0) {\n    //     const heading = [];\n    //     heading.push(<h3 key=\"ethnicityHeading\">Ethnicity</h3>);\n    //     pieCharts = heading.concat(pieCharts);\n    // }\n\n    return pieCharts;\n}\n\nexport default EthnicityChart;\n\nconst ethnicityAcronyms = [\n    {\n        id: \"AA\",\n        desc: \"African American\",\n        chartColor: \"#f6d18a\"\n    },\n    {\n        id: \"AS\",\n        desc: \"Asian\",\n        chartColor: \"blue\"\n    },\n    {\n        id: \"HI\",\n        desc: \"Hispanic\",\n        chartColor: \"green\"\n    },\n    {\n        id: \"MR\",\n        desc: \"Multiracial\",\n        chartColor: \"yellow\"\n    },\n    {\n        id: \"NA\",\n        desc: \"NA\",\n        chartColor: \"pink\"\n    },\n    {\n        id: \"NH_PI\",\n        desc: \"Native Hawaiian and Pacific Islander\",\n        chartColor: \"red\"\n    },\n    {\n        id: \"WH\",\n        desc: \"White\",\n        chartColor: \"brown\"\n    }\n];\n\nfunction getTooltipHTML(data) {\n    return (\n        <div\n            id={data.id}\n            style={{ display: \"flex\", flexDirection: \"column\", color: \"black\" }}\n        >\n            <div>\n                {data.desc}: {data.value}\n            </div>\n            <div>Percentage: {data.percentage}%</div>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { ResponsivePie } from \"@nivo/pie\";\n// import School from \"../../School\";\n\n/**\n * Main class component\n * @param {*} props\n */\nfunction EconDisChart(props) {\n\n    const yearToSchoolArrayDataMap = props.yearToSchoolArrayDataMap;\n    const dataYears = Object.keys(yearToSchoolArrayDataMap);\n    let allYearPieCharts = [];\n\n    dataYears.forEach(year => {\n        const thisYearSchoolDataArray = getEconDisForSchool(yearToSchoolArrayDataMap[year]);\n        let thisYearPieCharts = getPieCharts(thisYearSchoolDataArray);\n\n        allYearPieCharts.push(\n            <div key={year} style={styles.yearChartsParent}>\n                <span>{year}</span>\n                {thisYearPieCharts}\n            </div>\n        )\n    });\n\n\n\n    // const schoolDataArray = getEconDisForSchool(\n    //     props.schoolData,\n    //     props.options\n    // );\n    //\n    // let pieCharts = getPieCharts(schoolDataArray);\n\n    return (\n        <div id=\"econdis-pie-charts\"\n             style={styles.categoryChartsParent}\n        >\n            <h3 key=\"ethnicityHeading\">Economically Disadvantaged</h3>\n            {allYearPieCharts}\n        </div>\n    );\n}\n\n/**\n * return array: x->schoolName, male, female\n */\nfunction getEconDisForSchool(schoolArrayForYear) {\n    let chartData = [];\n    schoolArrayForYear.forEach(schoolObject => {\n        const schoolName = schoolObject._name;\n        const disadvantagedCount = schoolObject._economicallyDisadvantaged;\n        const totalCount = schoolObject._enrolled;\n        const nonDisadvantagedCount = totalCount - disadvantagedCount;\n\n        const disadvantagedPercentage = (\n            (disadvantagedCount / totalCount) *\n            100\n        ).toFixed(2);\n        const nonDisadvantagedPercentage = (\n            (nonDisadvantagedCount / totalCount) *\n            100\n        ).toFixed(2);\n\n        let thisSchoolData = {};\n        let schoolDataArray = [\n            {\n                id: \"Disadvantaged\",\n                value: disadvantagedCount,\n                percentage: disadvantagedPercentage,\n                color: \"orange\",\n                label: \"Economically Disadvantaged\"\n            },\n            {\n                id: \"Others\",\n                value: nonDisadvantagedCount,\n                percentage: nonDisadvantagedPercentage,\n                color: \"blue\",\n                label: \"Others\"\n            }\n        ];\n        thisSchoolData.schoolName = schoolName;\n        thisSchoolData.dataArray = schoolDataArray;\n        chartData.push(thisSchoolData);\n    });\n\n    // console.log(\"econ dis chart\");\n    // console.log(chartData);\n    return chartData;\n}\n\n// const pieChartParentDivStyle = {\n//     height: \"300px\",\n//     width: \"25%\",\n//     minWidth: \"250px\",\n//     flexGrow: \"1\",\n//     display: \"flex\",\n//     flexDirection: \"column\"\n// };\n\nconst styles = {\n    root: {\n        fontFamily: \"consolas, sans-serif\",\n        textAlign: \"center\",\n        position: \"relative\",\n        width: 250,\n        height: 300\n    },\n\n    totalLabel: {\n        fontSize: 24\n    },\n    categoryChartsParent: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        // height: \"50%\",\n        width: \"100%\",\n        borderStyle: \"ridge\",\n        padding: \"10px\",\n        backgroundColor: \"#4f4954\"\n    },\n    yearChartsParent: {\n        display: \"flex\",\n        flexDirection: \"row\"\n    }\n};\n\nfunction getPieCharts(schoolDataArray) {\n    const dataLength = schoolDataArray.length;\n    let pieCharts = [];\n\n    schoolDataArray.forEach((row, index) => {\n        const schoolName = row.schoolName;\n        const schoolData = row.dataArray;\n        pieCharts.push(\n            <div key={schoolName} style={styles.root}>\n                <div style={{ height: \"90%\", flexGrow: \"1\" }}>\n                    <ResponsivePie\n                        key={schoolName}\n                        colors={d => d.color}\n                        isInteractive={true}\n                        data={schoolData}\n                        sortByValue={true}\n                        enableSlicesLabels={false}\n                        enableRadialLabels={false}\n                        margin={{ top: 40, right: 40, bottom: 60, left: 40 }}\n                        innerRadius={0.5}\n                        tooltip={data => {\n                            return getTooltipHTML(data);\n                        }}\n                        legends={\n                            index + 1 === dataLength\n                                ? [\n                                      {\n                                          anchor: \"bottom\",\n                                          direction: \"row\",\n                                          itemWidth: 120,\n                                          itemHeight: 20,\n                                          translateY: 30,\n                                          translateX: 10\n                                      }\n                                  ]\n                                : undefined\n                        }\n                    />\n                </div>\n                <div style={{ flexGrow: \"1\" }}>{schoolName}</div>\n            </div>\n        );\n    });\n\n    // if (pieCharts && pieCharts.length > 0) {\n    //     const heading = [];\n    //     heading.push(\n    //         // <h3 key={\"econdis-heading\"}>Economically Disadvantaged</h3>\n    //         <h3 key={\"econdis-heading\"}>EconDis</h3>\n    //     );\n    //     pieCharts = heading.concat(pieCharts);\n    // }\n\n    return pieCharts;\n}\n\nfunction getTooltipHTML(data) {\n    return (\n        <div\n            style={{ display: \"flex\", flexDirection: \"column\", color: \"black\" }}\n        >\n            <div>\n                {data.label}: {data.value}\n            </div>\n            <div>Percentage: {data.percentage}%</div>\n        </div>\n    );\n}\n\nexport default EconDisChart;\n","import React from \"react\";\nimport { ResponsivePie } from \"@nivo/pie\";\n// import School from \"../../School\";\n\n/**\n * Main class component\n * @param {*} props\n */\nfunction DisabilityChart(props) {\n\n    const yearToSchoolArrayDataMap = props.yearToSchoolArrayDataMap;\n    const dataYears = Object.keys(yearToSchoolArrayDataMap);\n    let allYearPieCharts = [];\n\n    dataYears.forEach(year => {\n        const thisYearSchoolDataArray = getDisabilityData(yearToSchoolArrayDataMap[year]);\n        let thisYearPieCharts = getPieCharts(thisYearSchoolDataArray);\n\n        allYearPieCharts.push(\n            <div key={year} style={styles.yearChartsParent}>\n                <span>{year}</span>\n                {thisYearPieCharts}\n            </div>\n        )\n    });\n\n    return (\n        <div id=\"disability-pie-charts\"\n             style={styles.categoryChartsParent}\n        >\n            <h3 key=\"ethnicityHeading\">Students With Disability</h3>\n            {allYearPieCharts}\n        </div>\n    );\n\n}\n\n/**\n * return array: x->schoolName, male, female\n */\nfunction getDisabilityData(schoolArrayForYear) {\n    let chartData = [];\n    schoolArrayForYear.forEach(schoolObject => {\n        const schoolName = schoolObject._name;\n        const disabilityCount = schoolObject._studentsWithDisability;\n        const totalCount = schoolObject._enrolled;\n        const nonDisabilityCount = totalCount - disabilityCount;\n\n        const disabilityPercentage = (\n            (disabilityCount / totalCount) *\n            100\n        ).toFixed(2);\n        const nonDisabilityPercentage = (\n            (nonDisabilityCount / totalCount) *\n            100\n        ).toFixed(2);\n\n        let thisSchoolData = {};\n        let schoolDataArray = [\n            {\n                // id: \"Students With Disability\",\n                id: \"SWD\",\n                value: disabilityCount,\n                percentage: disabilityPercentage,\n                color: \"orange\",\n                label: \"Students With Disability\"\n            },\n            {\n                id: \"Others\",\n                value: nonDisabilityCount,\n                percentage: nonDisabilityPercentage,\n                color: \"blue\",\n                label: \"Others\"\n            }\n        ];\n        thisSchoolData.schoolName = schoolName;\n        thisSchoolData.dataArray = schoolDataArray;\n        chartData.push(thisSchoolData);\n    });\n\n    // console.log(\"disability chart\");\n    // console.log(chartData);\n    return chartData;\n}\n\n\nconst styles = {\n    root: {\n        fontFamily: \"consolas, sans-serif\",\n        textAlign: \"center\",\n        position: \"relative\",\n        width: 250,\n        height: 300\n    },\n\n    totalLabel: {\n        fontSize: 24\n    },\n    categoryChartsParent: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        // height: \"50%\",\n        width: \"100%\",\n        borderStyle: \"ridge\",\n        padding: \"10px\",\n        backgroundColor: \"#6f7348\"\n    },\n    yearChartsParent: {\n        display: \"flex\",\n        flexDirection: \"row\"\n    }\n};\n\nfunction getPieCharts(schoolDataArray) {\n    const dataLength = schoolDataArray.length;\n    let pieCharts = [];\n\n    schoolDataArray.forEach((row, index) => {\n        const schoolName = row.schoolName;\n        const schoolData = row.dataArray;\n        pieCharts.push(\n            <div key={schoolName} style={styles.root}>\n                <div style={{ height: \"90%\", flexGrow: \"1\" }}>\n                    <ResponsivePie\n                        key={schoolName}\n                        colors={d => d.color}\n                        isInteractive={true}\n                        data={schoolData}\n                        sortByValue={true}\n                        enableSlicesLabels={false}\n                        enableRadialLabels={false}\n                        innerRadius={0.5}\n                        margin={{ top: 40, right: 60, bottom: 40, left: 40 }}\n                        tooltip={data => {\n                            return getTooltipHTML(data);\n                        }}\n                        legends={\n                            index + 1 === dataLength\n                                ? [\n                                      {\n                                          anchor: \"top-right\",\n                                          direction: \"column\",\n                                          itemWidth: 20,\n                                          itemHeight: 20,\n                                          translateY: 20,\n                                          translateX: 20\n                                          // symbolSize: 18,\n                                          // symbolShape: \"circle\"\n                                      }\n                                  ]\n                                : undefined\n                        }\n                    />\n                </div>\n                <div style={{ flexGrow: \"1\" }}>{schoolName}</div>\n            </div>\n        );\n    });\n\n    // if (pieCharts && pieCharts.length > 0) {\n    //     const heading = [];\n    //     heading.push(\n    //         <div key={\"disability-heading\"}>\n    //             {/* <h3>Students With Disability</h3> */}\n    //             <h3>Disability</h3>\n    //         </div>\n    //     );\n    //     pieCharts = heading.concat(pieCharts);\n    // }\n\n    return pieCharts;\n}\n\nfunction getTooltipHTML(data) {\n    return (\n        <div\n            style={{ display: \"flex\", flexDirection: \"column\", color: \"black\" }}\n        >\n            <div>\n                {data.label}: {data.value}\n            </div>\n            <div>Percentage: {data.percentage}%</div>\n        </div>\n    );\n}\n\nexport default DisabilityChart;\n","/**\n * English Language Learners\n */\n\nimport React from \"react\";\nimport { ResponsivePie } from \"@nivo/pie\";\nimport {CategoryChartPanelBackgroundColor} from \"../../Constants\"\n\n/**\n * Main class component\n * @param {*} props\n */\nfunction ELLChart(props) {\n\n    const yearToSchoolArrayDataMap = props.yearToSchoolArrayDataMap;\n    const dataYears = Object.keys(yearToSchoolArrayDataMap);\n    let allYearPieCharts = [];\n\n    dataYears.forEach(year => {\n        const thisYearSchoolDataArray = getLanguageLearnerData(yearToSchoolArrayDataMap[year]);\n        let thisYearPieCharts = getPieCharts(thisYearSchoolDataArray);\n\n        allYearPieCharts.push(\n            <div key={year} style={styles.yearChartsParent}>\n                <span>{year}</span>\n                {thisYearPieCharts}\n            </div>\n        )\n    });\n\n    return (\n        <div id=\"disability-pie-charts\"\n             style={styles.categoryChartsParent}\n        >\n            <h3 key=\"ethnicityHeading\">English Language Learners</h3>\n            {allYearPieCharts}\n        </div>\n    );\n\n\n}\n\n/**\n * return array: x->schoolName, male, female\n */\nfunction getLanguageLearnerData(schoolArrayForYear) {\n    let chartData = [];\n    schoolArrayForYear.forEach(schoolObject => {\n        const schoolName = schoolObject._name;\n        const languageLearnerCount = schoolObject._englishLanguageLearner;\n        const totalCount = schoolObject._enrolled;\n        const otherCount = totalCount - languageLearnerCount;\n\n        const learnerPercentage = (\n            (languageLearnerCount / totalCount) *\n            100\n        ).toFixed(2);\n        const otherPercentage = ((otherCount / totalCount) * 100).toFixed(2);\n\n        let thisSchoolData = {};\n        let schoolDataArray = [\n            {\n                // id: \"Students With Disability\",\n                id: \"ELL\",\n                value: languageLearnerCount,\n                percentage: learnerPercentage,\n                color: \"orange\",\n                label: \"English Language Learner\"\n            },\n            {\n                id: \"Others\",\n                value: otherCount,\n                percentage: otherPercentage,\n                color: \"blue\",\n                label: \"Others\"\n            }\n        ];\n        thisSchoolData.schoolName = schoolName;\n        thisSchoolData.dataArray = schoolDataArray;\n        chartData.push(thisSchoolData);\n    });\n\n    return chartData;\n}\n\nconst styles = {\n    root: {\n        fontFamily: \"consolas, sans-serif\",\n        textAlign: \"center\",\n        position: \"relative\",\n        width: 250,\n        height: 300\n    },\n\n    totalLabel: {\n        fontSize: 24\n    },\n    categoryChartsParent: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        // height: \"50%\",\n        width: \"100%\",\n        borderStyle: \"ridge\",\n        padding: \"10px\",\n        backgroundColor: CategoryChartPanelBackgroundColor\n    },\n    yearChartsParent: {\n        display: \"flex\",\n        flexDirection: \"row\"\n    }\n};\n\nfunction getPieCharts(schoolDataArray) {\n    const dataLength = schoolDataArray.length;\n    let pieCharts = [];\n\n    schoolDataArray.forEach((row, index) => {\n        const schoolName = row.schoolName;\n        const schoolData = row.dataArray;\n        pieCharts.push(\n            <div key={schoolName} style={styles.root}>\n                <div style={{ height: \"90%\", flexGrow: \"1\" }}>\n                    <ResponsivePie\n                        key={schoolName}\n                        colors={d => d.color}\n                        isInteractive={true}\n                        data={schoolData}\n                        sortByValue={true}\n                        enableSlicesLabels={false}\n                        enableRadialLabels={false}\n                        innerRadius={0.5}\n                        margin={{ top: 40, right: 60, bottom: 40, left: 40 }}\n                        tooltip={data => {\n                            return getTooltipHTML(data);\n                        }}\n                        legends={\n                            index + 1 === dataLength\n                                ? [\n                                      {\n                                          anchor: \"bottom\",\n                                          direction: \"row\",\n                                          itemWidth: 120,\n                                          itemHeight: 20,\n                                          translateY: 30,\n                                          translateX: 10\n                                      }\n                                  ]\n                                : undefined\n                        }\n                    />\n                </div>\n                <div style={{ flexGrow: \"1\" }}>{schoolName}</div>\n            </div>\n        );\n    });\n\n    return pieCharts;\n}\n\nfunction getTooltipHTML(data) {\n    return (\n        <div\n            style={{ display: \"flex\", flexDirection: \"column\", color: \"black\" }}\n        >\n            <div>\n                {data.label}: {data.value}\n            </div>\n            <div>Percentage: {data.percentage}%</div>\n        </div>\n    );\n}\n\nexport default ELLChart;\n","import React from \"react\";\n\nfunction NextStepsPanel() {\n    const styles = {\n        action: {\n            margin: \"10px\",\n            width: \"50%\",\n            borderStyle: \"ridge\",\n            borderWidth: \"2px\",\n            padding: \"10px\"\n        },\n        row: {\n            display: \"flex\",\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            margin: \"10px\",\n            width: \"70%\"\n        },\n\n        header: {\n            height: \"30%\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            display: \"flex\",\n            fontSize: \"xx-large\"\n        },\n        learn: {\n            height: \"30%\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            display: \"flex\",\n            fontSize: \"22px\",\n            width: \"100%\"\n        },\n        footer: {\n            display: \"flex\",\n            flexDirection: \"row-reverse\",\n            backgroundColor: \"#674063\",\n            height: \"10%\",\n            alignItems: \"center\",\n            fontSize: \"20px\"\n        }\n    };\n\n    return (\n        <div\n            className=\"App\"\n            style={{\n                display: \"flex\",\n                minHeight: \"90vh\",\n                flexDirection: \"column\",\n                backgroundColor: \"#d24242\",\n                width: \"100%\"\n            }}\n        >\n            <div style={styles.header}>\n                <h2 className=\"next-steps-panel\">Next Steps</h2>\n            </div>\n            <div\n                style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    alignItems: \"center\",\n                    fontSize: \"x-large\",\n                    height: \"30%\"\n                }}\n            >\n                <div style={styles.row}>\n                    <div style={styles.action}>\n                        Closing the Digital Equity Gap\n                    </div>\n                    <div style={styles.action}>The Digital Equity Walk</div>\n                </div>\n                <div style={styles.row}>\n                    <div style={styles.action}>The Walk in Action</div>\n                    <div style={styles.action}>Take the Virtual Walk</div>\n                </div>\n            </div>\n            <div style={styles.learn}>\n                <span style={{ width: \"60%\" }}>\n                    Want to learn more about the Digital Equity Walk or about\n                    opportunities to host a walk? Visit the Digital Equity Walk\n                    in Action or contact Jackney Prioly Joseph.\n                </span>\n            </div>\n            <div style={styles.footer}>\n                <span style={{ marginRight: \"20px\" }}>Contact Info</span>\n            </div>\n        </div>\n    );\n}\n\nexport default NextStepsPanel;\n","import { EntityType } from \"./Constants\";\n\nclass School {\n    constructor() {\n        this._male = 0;\n        this._female = 0;\n        this._ethnicity = [];\n        this._ethnicityMap = {};\n        this._districtName = \"\";\n        this._type = 0;\n        this._name = \"\";\n        this._economicallyDisadvantaged = 0;\n        this._enrolled = 0;\n        this._testTakers = 0;\n        this._studentsWithDisability = 0;\n        this._schoolYear = 2016;\n        this._englishLanguageLearner = 0;\n    }\n\n    setType(entityType) {\n        if (entityType === EntityType.SCHOOL || EntityType.DISTRICT) {\n            this._type = entityType;\n        } else {\n            this._type = EntityType.SCHOOL;\n            console.log(\"error setting entity\");\n        }\n    }\n\n    setMale(maleCount) {\n        // add error check\n        this._male = maleCount;\n    }\n\n    setFemale(femaleCount) {\n        // add error check\n        this._female = femaleCount;\n    }\n\n    setEthnicity(ethnicityObj) {\n        // add error check\n        this._ethnicity = ethnicityObj;\n    }\n\n    setEthnicityMap(ethnicityMap) {\n        // add error check\n        this._ethnicityMap = ethnicityMap;\n    }\n\n    setDistrictName(districtName) {\n        // add error check\n        this._districtName = districtName;\n    }\n\n    setName(name) {\n        this._name = name;\n    }\n\n    setEconomicallyDisadvantaged(count) {\n        this._economicallyDisadvantaged = count;\n    }\n\n    setEnrolled(count) {\n        this._enrolled = count;\n    }\n\n    setTestTakers(count) {\n        this._testTakers = count;\n    }\n\n    setStudentsWithDisability(count) {\n        this._studentsWithDisability = count;\n    }\n\n    setSchoolYear(year) {\n        this._schoolYear = year;\n    }\n\n    setEnglishLanguageLearner(count) {\n        this._englishLanguageLearner = count;\n    }\n}\n\nexport default School;\n","/*eslint-env es6*/\n// \"use strict\";\n\nimport React from \"react\";\nimport \"./App.css\";\nimport FilterPanel from \"./components/FilterPanel/FilterPanel\";\nimport GenderChart from \"./components/Charts/GenderChart\";\nimport EthnicityChart from \"./components/Charts/EthnicityChart\";\nimport EconDisChart from \"./components/Charts/EconDisChart\";\nimport DisabilityChart from \"./components/Charts/DisabilityChart\";\nimport ELLChart from \"./components/Charts/ELLChart\";\nimport NextStepsPanel from \"./components/NextStepsPanel\";\n// import GenderChart2 from \"./components/Charts/GenderChart2\";\n\nimport schoolData from \"./data/data-all\";\n\nimport {\n    EntityType,\n    EthnicityAcronymList,\n    EthnicityDefaultMap,\n    YearList\n} from \"./Constants\";\nimport School from \"./School\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.graphSelectionChangeHandler = this.graphSelectionChangeHandler.bind(\n            this\n        );\n        this.yearSelectionChangeHandler = this.yearSelectionChangeHandler.bind(this);\n\n        let selectedYearsMap = {};\n        YearList.forEach(year => {\n            selectedYearsMap[year] = false;\n        });\n        selectedYearsMap[YearList[YearList.length - 1]] = true;\n        const selectedSchools = [\"Massachussets\"];\n        const yearSchoolObjectMap = this.transformSchoolData(\n            schoolData,\n            selectedSchools,\n            selectedYearsMap\n        );\n\n        this.state = {\n            newSchoolData: yearSchoolObjectMap,\n            schoolData: this.extractSchoolData(schoolData),\n            // filteredData: this.filterSchoolData(\n            //     this.extractSchoolData(schoolData)\n            // ),\n            schoolOptions: selectedSchools,\n            selectedFilters: {\n                gender: false,\n                ethnicity: true,\n                economicallyDisadvantaged: false,\n                disability: false,\n                englishLanguageLearner: true\n            },\n            selectedYearsMap: selectedYearsMap,\n            filteredSchoolData: this.filterYearSchoolObjectMap(yearSchoolObjectMap, selectedSchools, selectedYearsMap)\n        };\n\n    }\n\n    render() {\n        const charts = this.createChartsFromFilterState();\n\n        return (\n            <div\n                className=\"App\"\n                style={{ display: \"flex\", flexDirection: \"column\" }}\n            >\n                <div style={{ height: \"10%\" }}>\n                    <h3> Digital Equity </h3>\n                </div>\n                <div className=\"App\" style={{ display: \"flex\" }}>\n                    <div\n                        className=\"filter-panel\"\n                        style={{ backgroundColor: \"darkgreen\" }}\n                    >\n                        <FilterPanel\n                            data={this.state.schoolData}\n                            selectedFilters={this.state.selectedFilters}\n                            selectedYears={this.state.selectedYearsMap}\n                            onSchoolFilterChange={(opts, actionMeta) =>\n                                this.schoolFilterChangeHandler(opts, actionMeta)\n                            }\n                            onGraphSelectionChange={\n                                this.graphSelectionChangeHandler\n                            }\n                            onYearSelectionChange={this.yearSelectionChangeHandler}\n                        />\n                    </div>\n                    <div className=\"chart-panel\">{charts}</div>\n                </div>\n                <NextStepsPanel />\n            </div>\n        );\n    }\n\n    createChartsFromFilterState() {\n        const selectedFilters = this.state.selectedFilters;\n\n        let charts = [];\n        if (selectedFilters.gender === true) {\n            charts.push(\n                <GenderChart\n                    yearToSchoolArrayDataMap={this.state.filteredSchoolData}\n                    key=\"genderChart\"\n                />\n            );\n        }\n\n        if (selectedFilters.ethnicity === true) {\n            charts.push(\n                <EthnicityChart\n                    // options={this.state.schoolOptions}\n                    // schoolData={this.state.schoolData}\n                    yearToSchoolArrayDataMap={this.state.filteredSchoolData}\n                    key=\"ethnicityChart\"\n                />\n            );\n        }\n\n        if (selectedFilters.economicallyDisadvantaged === true) {\n            charts.push(\n                <EconDisChart\n                    yearToSchoolArrayDataMap={this.state.filteredSchoolData}\n                    // options={this.state.schoolOptions}\n                    // schoolData={this.state.schoolData}\n                    key=\"economicallyDisadvantagedChart\"\n                />\n            );\n        }\n\n        if (selectedFilters.disability === true) {\n            charts.push(\n                <DisabilityChart\n                    yearToSchoolArrayDataMap={this.state.filteredSchoolData}\n                    // options={this.state.schoolOptions}\n                    // schoolData={this.state.schoolData}\n                    key=\"disabilityChart\"\n                />\n            );\n        }\n\n        if (selectedFilters.englishLanguageLearner === true) {\n            charts.push(\n                <ELLChart\n                    yearToSchoolArrayDataMap={this.state.filteredSchoolData}\n                    // options={this.state.schoolOptions}\n                    // schoolData={this.state.schoolData}\n                    key=\"disabilityChart\"\n                />\n            );\n        }\n\n        return charts;\n    }\n\n    graphSelectionChangeHandler(newSelection) {\n        this.setState({\n            selectedFilters: newSelection\n        });\n    }\n\n    yearSelectionChangeHandler(newSelection) {\n        this.setState({\n            selectedYears: newSelection,\n            filteredSchoolData: this.filterYearSchoolObjectMap(this.state.newSchoolData, this.state.schoolOptions, newSelection)\n        });\n    }\n\n    schoolFilterChangeHandler(selectedOptions, actionMeta) {\n        console.log(actionMeta);\n        if (!selectedOptions) {\n            selectedOptions = [];\n        }\n\n        const selectedSchoolOptions = this.transformSelectedOptions(selectedOptions);\n        this.setState({\n            schoolOptions: selectedSchoolOptions,\n            filteredSchoolData: this.filterYearSchoolObjectMap(this.state.newSchoolData, selectedSchoolOptions, this.state.selectedYearsMap)\n        });\n    }\n\n    /**\n     *\n     * @param {array} schoolDataArray\n     * @param {array} selectedSchools list of selected schools\n     * @param {Map} selectedYears\n     * @returns {[]}\n     */\n    transformSchoolData(schoolDataArray, selectedSchools, selectedYears) {\n        let validDataArray = this.filterSchoolDataWithFields(schoolDataArray);\n        let yearSchoolObjectMap = this.getYearSchoolObjectMapNew(validDataArray);\n\n\n        // add info for all districts\n        const allYears = Object.keys(yearSchoolObjectMap);\n        for (let year of allYears) {\n            const allSchoolNames = Object.keys(yearSchoolObjectMap[year]);\n            let thisYearSchoolObjectMap = yearSchoolObjectMap[year];\n\n            for (let schoolName of allSchoolNames) {\n                const schoolObject = thisYearSchoolObjectMap[schoolName];\n                const districtName = schoolObject._districtName;\n                const schoolYear = schoolObject._schoolYear;\n\n                let districtObject = thisYearSchoolObjectMap[districtName];\n                if (!districtObject) {\n                    districtObject = new School();\n                    districtObject.setName(districtName);\n                    districtObject.setType(EntityType.DISTRICT);\n                    districtObject.setEthnicityMap(EthnicityDefaultMap);\n                    districtObject.setSchoolYear(schoolYear);\n                } else {\n                    // console.log(districtName);\n                    // console.log(schoolName);\n                }\n                districtObject.setMale(\n                    districtObject._male + schoolObject._male\n                );\n                districtObject.setFemale(\n                    districtObject._female + schoolObject._female\n                );\n\n                districtObject.setEconomicallyDisadvantaged(\n                    districtObject._economicallyDisadvantaged +\n                        schoolObject._economicallyDisadvantaged\n                );\n\n                districtObject.setEnrolled(\n                    districtObject._enrolled + schoolObject._enrolled\n                );\n                districtObject.setStudentsWithDisability(\n                    districtObject._studentsWithDisability +\n                        schoolObject._studentsWithDisability\n                );\n\n                let thisDistrictEthnicityArray = [];\n                let thisDistrictEthnicityMap = districtObject._ethnicityMap;\n\n                for (let key in schoolObject._ethnicityMap) {\n                    const ethnicityObj = schoolObject._ethnicityMap[key];\n                    thisDistrictEthnicityMap[key].value += ethnicityObj.value;\n                    thisDistrictEthnicityArray.push(\n                        thisDistrictEthnicityMap[key]\n                    );\n                }\n\n                districtObject.setEthnicityMap(thisDistrictEthnicityMap);\n                districtObject.setEthnicity(thisDistrictEthnicityArray);\n\n                districtObject.setEnglishLanguageLearner(\n                    districtObject._englishLanguageLearner +\n                        schoolObject._englishLanguageLearner\n                );\n\n                thisYearSchoolObjectMap[districtName] = districtObject;\n            }\n            yearSchoolObjectMap[year] = thisYearSchoolObjectMap;\n        }\n\n        return yearSchoolObjectMap;\n    }\n\n    transformSelectedOptions(selectedOptions) {\n        let schoolNameArray = [];\n        selectedOptions.forEach(row => {\n            schoolNameArray.push(row.label);\n        });\n        return schoolNameArray;\n    }\n\n    extractSchoolData(schoolDataArray) {\n        let filteredArray = [];\n        let schoolObjectMap = {};\n\n        //  TODO: do this by year\n\n        filteredArray = this.filterSchoolDataWithFields(schoolDataArray);\n        schoolObjectMap = this.getSchoolObjectMap(filteredArray);\n\n        // add info for all districts\n        const allSchoolNames = Object.keys(schoolObjectMap);\n        for (let schoolName of allSchoolNames) {\n            const schoolObject = schoolObjectMap[schoolName];\n            const districtName = schoolObject._districtName;\n\n            let districtObject = schoolObjectMap[districtName];\n            if (!districtObject) {\n                districtObject = new School();\n                districtObject.setName(districtName);\n                districtObject.setType(EntityType.DISTRICT);\n                districtObject.setEthnicityMap(EthnicityDefaultMap);\n            } else {\n                // console.log(districtName);\n                // console.log(schoolName);\n            }\n            districtObject.setMale(districtObject._male + schoolObject._male);\n            districtObject.setFemale(\n                districtObject._female + schoolObject._female\n            );\n\n            districtObject.setEconomicallyDisadvantaged(\n                districtObject._economicallyDisadvantaged +\n                    schoolObject._economicallyDisadvantaged\n            );\n\n            districtObject.setEnrolled(\n                districtObject._enrolled + schoolObject._enrolled\n            );\n            districtObject.setStudentsWithDisability(\n                districtObject._studentsWithDisability +\n                    schoolObject._studentsWithDisability\n            );\n\n            let thisDistrictEthnicityArray = [];\n            let thisDistrictEthnicityMap = districtObject._ethnicityMap;\n\n            for (let key in schoolObject._ethnicityMap) {\n                const ethnicityObj = schoolObject._ethnicityMap[key];\n                thisDistrictEthnicityMap[key].value += ethnicityObj.value;\n                thisDistrictEthnicityArray.push(thisDistrictEthnicityMap[key]);\n            }\n\n            districtObject.setEthnicityMap(thisDistrictEthnicityMap);\n            districtObject.setEthnicity(thisDistrictEthnicityArray);\n\n            districtObject.setEnglishLanguageLearner(\n                districtObject._englishLanguageLearner +\n                    schoolObject._englishLanguageLearner\n            );\n\n            schoolObjectMap[districtName] = districtObject;\n        }\n\n        // console.log(\"schoolObjectMap\");\n        // console.log(schoolObjectMap);\n        return schoolObjectMap;\n    }\n\n    // only use schooldata that have the fields available\n    filterSchoolDataWithFields(schoolDataArray) {\n        let filteredArray = [];\n        let schoolsWithMissingEntry = [];\n        // filter out schools with all available data\n        schoolDataArray.forEach(schoolRow => {\n            if (\n                Number.isInteger(parseInt(schoolRow[\"FEMALE\"])) &&\n                Number.isInteger(parseInt(schoolRow[\"MALE\"])) &&\n                schoolRow[\"DIST_NAME\"] &&\n                Number.isInteger(parseInt(schoolRow[\"ECODIS\"])) &&\n                Number.isInteger(parseInt(schoolRow[\"SWD\"])) &&\n                Number.isInteger(parseInt(schoolRow[\"SY\"])) &&\n                Number.isInteger(parseInt(schoolRow[\"ELL\"]))\n            ) {\n                filteredArray.push(schoolRow);\n            } else {\n                schoolsWithMissingEntry.push(schoolRow);\n            }\n        });\n\n        if (schoolsWithMissingEntry.length > 0) {\n            // console.log(\"missing entry for schools: \");\n            // console.log(schoolsWithMissingEntry);\n        }\n\n        return filteredArray;\n    }\n\n\n    getSchoolObjectMap(filteredArray) {\n        let schoolObjectMap = {};\n\n        // add all school data\n        filteredArray.forEach(schoolRow => {\n            const schoolName = schoolRow[\"SCH_NAME\"];\n            const districtName = schoolRow[\"DIST_NAME\"];\n\n            let thisSchool = new School();\n            thisSchool.setName(schoolName);\n            thisSchool.setType(EntityType.SCHOOL);\n            thisSchool.setMale(parseInt(schoolRow[\"MALE\"]));\n            thisSchool.setFemale(parseInt(schoolRow[\"FEMALE\"]));\n            thisSchool.setDistrictName(districtName);\n            thisSchool.setEthnicity([]);\n            thisSchool.setEconomicallyDisadvantaged(\n                parseInt(schoolRow[\"ECODIS\"])\n            );\n            thisSchool.setEnrolled(parseInt(schoolRow[\"STUDENTS_ENROLLED\"]));\n            thisSchool.setStudentsWithDisability(parseInt(schoolRow[\"SWD\"]));\n            thisSchool.setSchoolYear(parseInt(schoolRow[\"SY\"]));\n            thisSchool.setEnglishLanguageLearner(parseInt(schoolRow[\"ELL\"]));\n\n            let thisSchoolEthnicityArray = [];\n            let thisSchoolEthnicityMap = {};\n\n            EthnicityAcronymList.forEach(ethnicityObj => {\n                let ethnicityArrayMember = {\n                    id: ethnicityObj.id,\n                    value: parseInt(schoolRow[ethnicityObj.id]),\n                    label: ethnicityObj.desc,\n                    desc: ethnicityObj.desc,\n                    chartColor: ethnicityObj.chartColor\n                };\n\n                thisSchoolEthnicityArray.push(ethnicityArrayMember);\n                thisSchoolEthnicityMap[\n                    ethnicityArrayMember.id\n                ] = ethnicityArrayMember;\n            });\n\n            thisSchool.setEthnicity(thisSchoolEthnicityArray);\n            thisSchool.setEthnicityMap(thisSchoolEthnicityMap);\n\n            schoolObjectMap[schoolName] = thisSchool;\n        });\n\n        return schoolObjectMap;\n    }\n\n    /**\n     *\n     * @param {array} filteredArray\n     * @returns {Map} yearSchoolObjectMap\n     */\n    getYearSchoolObjectMapNew(filteredArray) {\n        let schoolObjectMap = {};\n        let yearSchoolObjectMap = {};\n\n        // add all school data\n        filteredArray.forEach(schoolRow => {\n            const schoolName = schoolRow[\"SCH_NAME\"];\n            const districtName = schoolRow[\"DIST_NAME\"];\n            const schoolYear = parseInt(schoolRow[\"SY\"]);\n\n            let thisSchool = new School();\n            thisSchool.setName(schoolName);\n            thisSchool.setType(EntityType.SCHOOL);\n            thisSchool.setMale(parseInt(schoolRow[\"MALE\"]));\n            thisSchool.setFemale(parseInt(schoolRow[\"FEMALE\"]));\n            thisSchool.setDistrictName(districtName);\n            thisSchool.setEthnicity([]);\n            thisSchool.setEconomicallyDisadvantaged(\n                parseInt(schoolRow[\"ECODIS\"])\n            );\n            thisSchool.setEnrolled(parseInt(schoolRow[\"STUDENTS_ENROLLED\"]));\n            thisSchool.setStudentsWithDisability(parseInt(schoolRow[\"SWD\"]));\n            thisSchool.setSchoolYear(schoolYear);\n            thisSchool.setEnglishLanguageLearner(parseInt(schoolRow[\"ELL\"]));\n\n            let thisSchoolEthnicityArray = [];\n            let thisSchoolEthnicityMap = {};\n\n            EthnicityAcronymList.forEach(ethnicityObj => {\n                let ethnicityArrayMember = {\n                    id: ethnicityObj.id,\n                    value: parseInt(schoolRow[ethnicityObj.id]),\n                    label: ethnicityObj.desc,\n                    desc: ethnicityObj.desc,\n                    chartColor: ethnicityObj.chartColor\n                };\n\n                thisSchoolEthnicityArray.push(ethnicityArrayMember);\n                thisSchoolEthnicityMap[\n                    ethnicityArrayMember.id\n                ] = ethnicityArrayMember;\n            });\n\n            thisSchool.setEthnicity(thisSchoolEthnicityArray);\n            thisSchool.setEthnicityMap(thisSchoolEthnicityMap);\n\n            schoolObjectMap[schoolName] = thisSchool;\n            let thisYearSchoolObjectMap = yearSchoolObjectMap[schoolYear];\n            if (!thisYearSchoolObjectMap) {\n                thisYearSchoolObjectMap = {};\n            }\n            thisYearSchoolObjectMap[schoolName] = thisSchool;\n            yearSchoolObjectMap[schoolYear] = thisYearSchoolObjectMap;\n        });\n\n        // return schoolObjectMap;\n\n        // console.log(\"yearSchoolObjectMap\");\n        // console.log(yearSchoolObjectMap);\n\n        return yearSchoolObjectMap;\n    }\n\n    /**\n     *\n     * @param {Map} yearSchoolObjectMap\n     * @param {Array} selectedSchoolsArray\n     * @param {Map} selectedYearsMap\n     * @returns {Map} filteredSchoolDataMap of type Map[year] -> Array{SchoolObject}\n     */\n    filterYearSchoolObjectMap(yearSchoolObjectMap, selectedSchoolsArray, selectedYearsMap) {\n        let filteredSchoolDataMap = {};\n        let selectedYearsArray = [];\n        Object.keys(selectedYearsMap).forEach((key) => {\n            if(selectedYearsMap[key]===true)\n                selectedYearsArray.push(key)\n        });\n\n        selectedYearsArray.forEach(year => {\n            if(!filteredSchoolDataMap[year]) filteredSchoolDataMap[year] = [];\n           selectedSchoolsArray.forEach(schoolName => {\n               filteredSchoolDataMap[year].push(yearSchoolObjectMap[year][schoolName]);\n           });\n        });\n\n        console.log(\"filteredSchoolDataMap\");\n        console.log(filteredSchoolDataMap);\n\n        return filteredSchoolDataMap;\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}