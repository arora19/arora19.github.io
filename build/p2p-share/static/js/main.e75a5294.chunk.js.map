{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["createDat","a","datSdk","window","DatArchive","create","title","archive","selectedFile","document","getElementById","files","fileName","name","toBase64","encodedFile","encodedFileData","split","writeFile","encoding","console","log","error","innerHTML","url","receiveDat","datUrl","value","load","readdir","filenames","readFile","metadata","filename","file","alert","receivedFilename","querySelector","href","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","App","className","type","id","onClick","style","margin","alt","target","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"kRAoCeA,I,2EAAf,wCAAAC,EAAA,6DACUC,EAASC,OAAOD,OAEdE,EAAeF,EAAfE,WAHZ,SAK0BA,EAAWC,OAAO,CACpCC,MAAO,cANf,cAKUC,EALV,OASUC,EAAeC,SAASC,eAAe,eAAeC,MAAM,GATtE,SAWcC,EAAWJ,EAAaK,KAXtC,UAYkCC,EAASN,GAZ3C,eAYcO,EAZd,OAacC,EAAkBD,EAAYE,MAAM,KAblD,UAccV,EAAQW,UAAU,YAAaF,EAAgB,GAAI,CAAEG,SAAU,UAd7E,yBAecZ,EAAQW,UAAU,QAASN,EAAU,CAAEO,SAAU,UAf/D,yBAgBcZ,EAAQW,UAAU,QAASF,EAAgB,GAAI,CAAEG,SAAU,WAhBzE,QAmBQC,QAAQC,IAAIN,GAnBpB,kDAqBQK,QAAQE,MAAM,4BArBtB,yBAuBQF,QAAQC,IAAI,QAvBpB,qBA+BIZ,SAASC,eAAe,cAAca,UAAYhB,EAAQiB,IAC1DJ,QAAQC,IAAId,EAAQiB,KAhCxB,iE,+BAmCeC,I,2EAAf,wCAAAxB,EAAA,6DACYG,EAAeD,OAAOD,OAAtBE,WAEFsB,EAASjB,SAASC,eAAe,gBAAgBiB,MACvDP,QAAQC,IAAI,YAAcK,GAJ9B,SAK0BtB,EAAWwB,KAAKF,GAL1C,cAKUnB,EALV,gBAQ0BA,EAAQsB,QAAQ,KAR1C,cAQQC,EARR,OASIV,QAAQC,IAAI,cAAgBS,GAThC,UAc2BvB,EAAQwB,SAAS,YAAa,SAdzD,eAcUC,EAdV,iBAe2BzB,EAAQwB,SAAS,QAAS,SAfrD,eAeUE,EAfV,iBAgBqB1B,EAAQwB,SAAS,QAAS,UAhB/C,QAgBQG,EAhBR,OAiBIC,MAAM,oBACNhC,OAAOiC,iBAAmBH,EAC1BxB,SAAS4B,cAAc,KAAKC,KAAON,EAAW,IAAME,EAWpDd,QAAQC,IAAI,mBAAqBa,GACjCd,QAAQC,IAAI,aAAeW,GA/B/B,6C,sBAoCA,SAASlB,EAASoB,GACd,OAAO,IAAIK,SAAQ,SAACC,EAASC,GACzB,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,cAAcV,GACrBQ,EAAOG,OAAS,kBAAML,EAAQE,EAAOI,SACrCJ,EAAOK,QAAU,SAACzB,GAAD,OAAWmB,EAAOnB,OAwB5B0B,MApIf,WAEI,OACI,yBAAKC,UAAU,OACX,gDAEA,uDACA,2BAAOC,KAAK,OAAOrC,KAAK,cAAcsC,GAAG,gBAGzC,6BAKA,4BAAQC,QAASpD,EAAWqD,MAAO,CAAEC,OAAQ,QAA7C,mBACA,+CAAoB,yBAAKH,GAAG,eAA5B,KAEA,6BACA,2BAAOD,KAAK,OAAOrC,KAAK,eAAesC,GAAG,iBAC1C,4BAAQC,QAAS3B,EAAY4B,MAAO,CAAEC,OAAQ,QAA9C,mBACA,iDAAsB,yBAAKH,GAAG,iBAA9B,KACA,iDAAsB,yBAAKI,IAAI,iBAA/B,KAEA,6CAAmBpD,OAAOiC,kBAC1B,uBAAGE,KAAK,UAAUkB,OAAO,UACrB,iDClBIC,QACW,cAA7BtD,OAAOuD,SAASC,UAEe,UAA7BxD,OAAOuD,SAASC,UAEhBxD,OAAOuD,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFtD,SAASC,eAAe,SDyHpB,kBAAmBsD,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhD,GACLF,QAAQE,MAAMA,EAAMiD,c","file":"static/js/main.e75a5294.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n// import SDK from \"dat-sdk\";\n\nfunction App() {\n\n    return (\n        <div className=\"App\">\n            <h2> P2P file share </h2>\n\n            <div>Select file to share: </div>\n            <input type=\"file\" name=\"file-upload\" id=\"file-upload\"\n                // accept=\"image/png, image/jpeg, pdf\"\n            />\n            <br />\n\n            {/* <div>Enter message to share: </div>\n            <input type=\"text\" name=\"send-message\" id=\"send-message\" /> */}\n\n            <button onClick={createDat} style={{ margin: \"5px\" }}> Start Sharing </button>\n            <div> sharing link: <div id=\"share-link\"></div> </div>\n\n            <br />\n            <input type=\"text\" name=\"receive-link\" id=\"receive-text\" />\n            <button onClick={receiveDat} style={{ margin: \"5px\" }}> Receive files </button>\n            <div> received value: <div id=\"received-val\"></div> </div>\n            <div> received image: <img alt=\"received-img\"></img> </div>\n\n            <p>File receievd: {window.receivedFilename}</p>\n            <a href=\"data...\" target=\"_blank\">\n                <button> Download </button>\n            </a>\n        </div>\n    );\n}\n\nasync function createDat() {\n    const datSdk = window.datSdk;\n\n    const { DatArchive } = datSdk;\n\n    const archive = await DatArchive.create({\n        title: 'magic-dat'\n    });\n\n    const selectedFile = document.getElementById('file-upload').files[0];\n    try {\n        const fileName = selectedFile.name;\n        const encodedFile = await toBase64(selectedFile);\n        const encodedFileData = encodedFile.split(',');\n        await archive.writeFile('/metadata', encodedFileData[0], { encoding: 'utf-8' });\n        await archive.writeFile('/name', fileName, { encoding: 'utf-8' });\n        await archive.writeFile('/file', encodedFileData[1], { encoding: 'base64' });\n        // await archive.writeFile('/img.png', encodedFile, {encoding: 'base64'});\n\n        console.log(encodedFile);\n    } catch (err) {\n        console.error(\"error in encoding: \" + err);\n    } finally {\n        console.log('LAST');\n    }\n\n    // const sendMessage = document.getElementById('send-message').value;\n    // await archive.writeFile('/message', sendMessage);\n\n    // Open this in Beaker\n    // window.datUrl = archive.url;\n    document.getElementById(\"share-link\").innerHTML = archive.url;\n    console.log(archive.url);\n}\n\nasync function receiveDat() {\n    const { DatArchive } = window.datSdk;\n    // Load the archive for the dat foundation website\n    const datUrl = document.getElementById(\"receive-text\").value;\n    console.log(\"reading: \" + datUrl);\n    const archive = await DatArchive.load(datUrl);\n\n    // Read a file and parse it as JSON\n    var filenames = await archive.readdir('/')\n    console.log(\"filenames: \" + filenames);\n    // const datJSON = await archive.readFile('/dat.json');\n\n    // const receivedImage = await archive.readFile('/file', 'base64');\n    // const receivedMessage = await archive.readFile('/message');\n    const metadata = await archive.readFile('/metadata', 'utf-8');\n    const filename = await archive.readFile('/name', 'utf-8');\n    var file = await archive.readFile('/file', 'base64');\n    alert(\"receive complete\");\n    window.receivedFilename = filename;\n    document.querySelector('a').href = metadata + ',' + file;\n\n\n    // document.querySelector('img').src = 'data:image/png;base64,'+str;\n\n    // document.getElementById(\"received-val\").innerHTML = datJSON;\n    // document.getElementById(\"received-val\").innerHTML = receivedMessage;\n    // document.getElementById(\"received-val\").innerHTML = receivedImage;\n    // const decodedFile = dataURLtoFile(metadata + ',' + file, filename);\n\n\n    console.log(\"received image: \" + file);\n    console.log(\"metadata: \" + metadata);\n    // console.log(\"received file: \" + decodedFile);\n    // console.log(decodedFile);\n}\n\nfunction toBase64(file) {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = (error) => reject(error);\n    });\n}\n\n// function dataURLtoFile(dataurl, filename) {\n\n//     var arr = dataurl.split(','),\n//         mime = arr[0].match(/:(.*?);/)[1],\n//         bstr = atob(arr[1]), \n//         n = bstr.length, \n//         u8arr = new Uint8Array(n);\n\n//     while(n--){\n//         u8arr[n] = bstr.charCodeAt(n);\n//     }\n\n//     return new File([u8arr], filename, {type:mime});\n// }\n\n// function triggerFileDownload() {\n\n\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}